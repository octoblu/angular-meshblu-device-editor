!function(e,t,n){"use strict";function r(e,t){return t=t||Error,function(){var n,r,i=arguments[0],o="["+(e?e+":":"")+i+"] ",a=arguments[1],s=arguments;for(n=o+a.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1);return t+2<s.length?de(s[t+2]):e}),n=n+"\nhttp://errors.angularjs.org/1.3.20/"+(e?e+"/":"")+i,r=2;r<arguments.length;r++)n=n+(2==r?"?":"&")+"p"+(r-2)+"="+encodeURIComponent(de(arguments[r]));return new t(n)}}function i(e){if(null==e||S(e))return!1;var t="length"in Object(e)&&e.length;return e.nodeType===br&&t?!0:b(e)||hr(e)||0===t||"number"==typeof t&&t>0&&t-1 in e}function o(e,t,n){var r,a;if(e)if(E(e))for(r in e)"prototype"==r||"length"==r||"name"==r||e.hasOwnProperty&&!e.hasOwnProperty(r)||t.call(n,e[r],r,e);else if(hr(e)||i(e)){var s="object"!=typeof e;for(r=0,a=e.length;a>r;r++)(s||r in e)&&t.call(n,e[r],r,e)}else if(e.forEach&&e.forEach!==o)e.forEach(t,n,e);else for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e);return e}function a(e){return Object.keys(e).sort()}function s(e,t,n){for(var r=a(e),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function l(e){return function(t,n){e(n,t)}}function u(){return++fr}function c(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function f(e){for(var t=e.$$hashKey,n=1,r=arguments.length;r>n;n++){var i=arguments[n];if(i)for(var o=Object.keys(i),a=0,s=o.length;s>a;a++){var l=o[a];e[l]=i[l]}}return c(e,t),e}function d(e){return parseInt(e,10)}function h(e,t){return f(Object.create(e),t)}function p(){}function m(e){return e}function $(e){return function(){return e}}function v(e){return"undefined"==typeof e}function g(e){return"undefined"!=typeof e}function y(e){return null!==e&&"object"==typeof e}function b(e){return"string"==typeof e}function w(e){return"number"==typeof e}function x(e){return"[object Date]"===lr.call(e)}function E(e){return"function"==typeof e}function k(e){return"[object RegExp]"===lr.call(e)}function S(e){return e&&e.window===e}function A(e){return e&&e.$evalAsync&&e.$watch}function M(e){return"[object File]"===lr.call(e)}function C(e){return"[object FormData]"===lr.call(e)}function O(e){return"[object Blob]"===lr.call(e)}function T(e){return"boolean"==typeof e}function P(e){return e&&E(e.then)}function N(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function R(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}function I(e){return Jn(e.nodeName||e[0]&&e[0].nodeName)}function _(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),t}function D(e,t,n,r){if(S(e)||A(e))throw ur("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");if(t){if(e===t)throw ur("cpi","Can't copy! Source and destination are identical.");if(n=n||[],r=r||[],y(e)){var i=n.indexOf(e);if(-1!==i)return r[i];n.push(e),r.push(t)}var a;if(hr(e)){t.length=0;for(var s=0;s<e.length;s++)a=D(e[s],null,n,r),y(e[s])&&(n.push(e[s]),r.push(a)),t.push(a)}else{var l=t.$$hashKey;hr(t)?t.length=0:o(t,function(e,n){delete t[n]});for(var u in e)e.hasOwnProperty(u)&&(a=D(e[u],null,n,r),y(e[u])&&(n.push(e[u]),r.push(a)),t[u]=a);c(t,l)}}else if(t=e,e)if(hr(e))t=D(e,[],n,r);else if(x(e))t=new Date(e.getTime());else if(k(e))t=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]),t.lastIndex=e.lastIndex;else if(y(e)){var f=Object.create(Object.getPrototypeOf(e));t=D(e,f,n,r)}return t}function V(e,t){if(hr(e)){t=t||[];for(var n=0,r=e.length;r>n;n++)t[n]=e[n]}else if(y(e)){t=t||{};for(var i in e)"$"===i.charAt(0)&&"$"===i.charAt(1)||(t[i]=e[i])}return t||e}function F(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var r,i,o,a=typeof e,s=typeof t;if(a==s&&"object"==a){if(!hr(e)){if(x(e))return x(t)?F(e.getTime(),t.getTime()):!1;if(k(e))return k(t)?e.toString()==t.toString():!1;if(A(e)||A(t)||S(e)||S(t)||hr(t)||x(t)||k(t))return!1;o={};for(i in e)if("$"!==i.charAt(0)&&!E(e[i])){if(!F(e[i],t[i]))return!1;o[i]=!0}for(i in t)if(!o.hasOwnProperty(i)&&"$"!==i.charAt(0)&&t[i]!==n&&!E(t[i]))return!1;return!0}if(!hr(t))return!1;if((r=e.length)==t.length){for(i=0;r>i;i++)if(!F(e[i],t[i]))return!1;return!0}}return!1}function j(e,t,n){return e.concat(or.call(t,n))}function U(e,t){return or.call(e,t||0)}function q(e,t){var n=arguments.length>2?U(arguments,2):[];return!E(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,j(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function L(e,r){var i=r;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?i=n:S(r)?i="$WINDOW":r&&t===r?i="$DOCUMENT":A(r)&&(i="$SCOPE"),i}function H(e,t){return"undefined"==typeof e?n:(w(t)||(t=t?2:null),JSON.stringify(e,L,t))}function B(e){return b(e)?JSON.parse(e):e}function z(e){e=nr(e).clone();try{e.empty()}catch(t){}var n=nr("<div>").append(e).html();try{return e[0].nodeType===xr?Jn(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Jn(t)})}catch(t){return Jn(n)}}function W(e){try{return decodeURIComponent(e)}catch(t){}}function G(e){var t,n,r={};return o((e||"").split("&"),function(e){if(e&&(t=e.replace(/\+/g,"%20").split("="),n=W(t[0]),g(n))){var i=g(t[1])?W(t[1]):!0;Xn.call(r,n)?hr(r[n])?r[n].push(i):r[n]=[r[n],i]:r[n]=i}}),r}function K(e){var t=[];return o(e,function(e,n){hr(e)?o(e,function(e){t.push(J(n,!0)+(e===!0?"":"="+J(e,!0)))}):t.push(J(n,!0)+(e===!0?"":"="+J(e,!0)))}),t.length?t.join("&"):""}function Y(e){return J(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function J(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function X(e,t){var n,r,i=vr.length;for(e=nr(e),r=0;i>r;++r)if(n=vr[r]+t,b(n=e.attr(n)))return n;return null}function Z(e,t){var n,r,i={};o(vr,function(t){var i=t+"app";!n&&e.hasAttribute&&e.hasAttribute(i)&&(n=e,r=e.getAttribute(i))}),o(vr,function(t){var i,o=t+"app";!n&&(i=e.querySelector("["+o.replace(":","\\:")+"]"))&&(n=i,r=i.getAttribute(o))}),n&&(i.strictDi=null!==X(n,"strict-di"),t(n,r?[r]:[],i))}function Q(n,r,i){y(i)||(i={});var a={strictDi:!1};i=f(a,i);var s=function(){if(n=nr(n),n.injector()){var e=n[0]===t?"document":z(n);throw ur("btstrpd","App Already Bootstrapped with this Element '{0}'",e.replace(/</,"&lt;").replace(/>/,"&gt;"))}r=r||[],r.unshift(["$provide",function(e){e.value("$rootElement",n)}]),i.debugInfoEnabled&&r.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),r.unshift("ng");var o=Be(r,i.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),o},l=/^NG_ENABLE_DEBUG_INFO!/,u=/^NG_DEFER_BOOTSTRAP!/;return e&&l.test(e.name)&&(i.debugInfoEnabled=!0,e.name=e.name.replace(l,"")),e&&!u.test(e.name)?s():(e.name=e.name.replace(u,""),cr.resumeBootstrap=function(e){return o(e,function(e){r.push(e)}),s()},void(E(cr.resumeDeferredBootstrap)&&cr.resumeDeferredBootstrap()))}function ee(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function te(e){var t=cr.element(e).injector();if(!t)throw ur("test","no injector found for element argument to getTestability");return t.get("$$testability")}function ne(e,t){return t=t||"_",e.replace(gr,function(e,n){return(n?t:"")+e.toLowerCase()})}function re(){var t;yr||(rr=e.jQuery,rr&&rr.fn.on?(nr=rr,f(rr.fn,{scope:Ur.scope,isolateScope:Ur.isolateScope,controller:Ur.controller,injector:Ur.injector,inheritedData:Ur.inheritedData}),t=rr.cleanData,rr.cleanData=function(e){var n;if(dr)dr=!1;else for(var r,i=0;null!=(r=e[i]);i++)n=rr._data(r,"events"),n&&n.$destroy&&rr(r).triggerHandler("$destroy");t(e)}):nr=be,cr.element=nr,yr=!0)}function ie(e,t,n){if(!e)throw ur("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function oe(e,t,n){return n&&hr(e)&&(e=e[e.length-1]),ie(E(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function ae(e,t){if("hasOwnProperty"===e)throw ur("badname","hasOwnProperty is not a valid {0} name",t)}function se(e,t,n){if(!t)return e;for(var r,i=t.split("."),o=e,a=i.length,s=0;a>s;s++)r=i[s],e&&(e=(o=e)[r]);return!n&&E(e)?q(o,e):e}function le(e){var t=e[0],n=e[e.length-1],r=[t];do{if(t=t.nextSibling,!t)break;r.push(t)}while(t!==n);return nr(r)}function ue(){return Object.create(null)}function ce(e){function t(e,t,n){return e[t]||(e[t]=n())}var n=r("$injector"),i=r("ng"),o=t(e,"angular",Object);return o.$$minErr=o.$$minErr||r,t(o,"module",function(){var e={};return function(r,o,a){var s=function(e,t){if("hasOwnProperty"===e)throw i("badname","hasOwnProperty is not a valid {0} name",t)};return s(r,"module"),o&&e.hasOwnProperty(r)&&(e[r]=null),t(e,r,function(){function e(e,n,r,i){return i||(i=t),function(){return i[r||"push"]([e,n,arguments]),u}}if(!o)throw n("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var t=[],i=[],s=[],l=e("$injector","invoke","push",i),u={_invokeQueue:t,_configBlocks:i,_runBlocks:s,requires:o,name:r,provider:e("$provide","provider"),factory:e("$provide","factory"),service:e("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),animation:e("$animateProvider","register"),filter:e("$filterProvider","register"),controller:e("$controllerProvider","register"),directive:e("$compileProvider","directive"),config:l,run:function(e){return s.push(e),this}};return a&&l(a),u})}})}function fe(e){var t=[];return JSON.stringify(e,function(e,n){if(n=L(e,n),y(n)){if(t.indexOf(n)>=0)return"<<already seen>>";t.push(n)}return n})}function de(e){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof e?"undefined":"string"!=typeof e?fe(e):e}function he(t){f(t,{bootstrap:Q,copy:D,extend:f,equals:F,element:nr,forEach:o,injector:Be,noop:p,bind:q,toJson:H,fromJson:B,identity:m,isUndefined:v,isDefined:g,isString:b,isFunction:E,isObject:y,isNumber:w,isElement:N,isArray:hr,version:Ar,isDate:x,lowercase:Jn,uppercase:Zn,callbacks:{counter:0},getTestability:te,$$minErr:r,$$csp:$r,reloadWithDebugInfo:ee}),ir=ce(e);try{ir("ngLocale")}catch(n){ir("ngLocale",[]).provider("$locale",$t)}ir("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:Yt}),e.provider("$compile",Xe).directive({a:Ni,input:Yi,textarea:Yi,form:Vi,script:jo,select:Lo,style:Bo,option:Ho,ngBind:Zi,ngBindHtml:eo,ngBindTemplate:Qi,ngClass:no,ngClassEven:io,ngClassOdd:ro,ngCloak:oo,ngController:ao,ngForm:Fi,ngHide:Ro,ngIf:uo,ngInclude:co,ngInit:ho,ngNonBindable:Mo,ngPluralize:Co,ngRepeat:Oo,ngShow:No,ngStyle:Io,ngSwitch:_o,ngSwitchWhen:Do,ngSwitchDefault:Vo,ngOptions:qo,ngTransclude:Fo,ngModel:ko,ngList:po,ngChange:to,pattern:Wo,ngPattern:Wo,required:zo,ngRequired:zo,minlength:Ko,ngMinlength:Ko,maxlength:Go,ngMaxlength:Go,ngValue:Xi,ngModelOptions:Ao}).directive({ngInclude:fo}).directive(Ri).directive(so),e.provider({$anchorScroll:ze,$animate:Jr,$browser:Ke,$cacheFactory:Ye,$controller:tt,$document:nt,$exceptionHandler:rt,$filter:ln,$interpolate:pt,$interval:mt,$http:ct,$httpBackend:dt,$location:Tt,$log:Pt,$parse:Ht,$rootScope:Kt,$q:Bt,$$q:zt,$sce:Qt,$sceDelegate:Zt,$sniffer:en,$templateCache:Je,$templateRequest:tn,$$testability:nn,$timeout:rn,$window:sn,$$rAF:Gt,$$asyncCallback:We,$$jqLite:je})}])}function pe(){return++Cr}function me(e){return e.replace(Pr,function(e,t,n,r){return r?n.toUpperCase():n}).replace(Nr,"Moz$1")}function $e(e){return!Dr.test(e)}function ve(e){var t=e.nodeType;return t===br||!t||t===kr}function ge(e,t){var n,r,i,a,s=t.createDocumentFragment(),l=[];if($e(e))l.push(t.createTextNode(e));else{for(n=n||s.appendChild(t.createElement("div")),r=(Vr.exec(e)||["",""])[1].toLowerCase(),i=jr[r]||jr._default,n.innerHTML=i[1]+e.replace(Fr,"<$1></$2>")+i[2],a=i[0];a--;)n=n.lastChild;l=j(l,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",o(l,function(e){s.appendChild(e)}),s}function ye(e,n){n=n||t;var r;return(r=_r.exec(e))?[n.createElement(r[1])]:(r=ge(e,n))?r.childNodes:[]}function be(e){if(e instanceof be)return e;var t;if(b(e)&&(e=pr(e),t=!0),!(this instanceof be)){if(t&&"<"!=e.charAt(0))throw Ir("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new be(e)}t?Te(this,ye(e)):Te(this,e)}function we(e){return e.cloneNode(!0)}function xe(e,t){if(t||ke(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,i=n.length;i>r;r++)ke(n[r])}function Ee(e,t,n,r){if(g(r))throw Ir("offargs","jqLite#off() does not support the `selector` argument");var i=Se(e),a=i&&i.events,s=i&&i.handle;if(s)if(t)o(t.split(" "),function(t){if(g(n)){var r=a[t];if(_(r||[],n),r&&r.length>0)return}Tr(e,t,s),delete a[t]});else for(t in a)"$destroy"!==t&&Tr(e,t,s),delete a[t]}function ke(e,t){var r=e.ng339,i=r&&Mr[r];if(i){if(t)return void delete i.data[t];i.handle&&(i.events.$destroy&&i.handle({},"$destroy"),Ee(e)),delete Mr[r],e.ng339=n}}function Se(e,t){var r=e.ng339,i=r&&Mr[r];return t&&!i&&(e.ng339=r=pe(),i=Mr[r]={events:{},data:{},handle:n}),i}function Ae(e,t,n){if(ve(e)){var r=g(n),i=!r&&t&&!y(t),o=!t,a=Se(e,!i),s=a&&a.data;if(r)s[t]=n;else{if(o)return s;if(i)return s&&s[t];f(s,t)}}}function Me(e,t){return e.getAttribute?(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")>-1:!1}function Ce(e,t){t&&e.setAttribute&&o(t.split(" "),function(t){e.setAttribute("class",pr((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+pr(t)+" "," ")))})}function Oe(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(t.split(" "),function(e){e=pr(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",pr(n))}}function Te(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;n>r;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function Pe(e,t){return Ne(e,"$"+(t||"ngController")+"Controller")}function Ne(e,t,r){e.nodeType==kr&&(e=e.documentElement);for(var i=hr(t)?t:[t];e;){for(var o=0,a=i.length;a>o;o++)if((r=nr.data(e,i[o]))!==n)return r;e=e.parentNode||e.nodeType===Sr&&e.host}}function Re(e){for(xe(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Ie(e,t){t||xe(e);var n=e.parentNode;n&&n.removeChild(e)}function _e(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):nr(n).on("load",t)}function De(e,t){var n=qr[t.toLowerCase()];return n&&Lr[I(e)]&&n}function Ve(e,t){var n=e.nodeName;return("INPUT"===n||"TEXTAREA"===n)&&Hr[t]}function Fe(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if(v(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0},o>1&&(i=V(i));for(var s=0;o>s;s++)n.isImmediatePropagationStopped()||i[s].call(e,n)}};return n.elem=e,n}function je(){this.$get=function(){return f(be,{hasClass:function(e,t){return e.attr&&(e=e[0]),Me(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Oe(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),Ce(e,t)}})}}function Ue(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"==r||"object"==r&&null!==e?e.$$hashKey=r+":"+(t||u)():r+":"+e}function qe(e,t){if(t){var n=0;this.nextUid=function(){return++n}}o(e,this.put,this)}function Le(e){var t=e.toString().replace(Gr,""),n=t.match(Br);return n?"function("+(n[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function He(e,t,n){var r,i,a,s;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw b(n)&&n||(n=e.name||Le(e)),Kr("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);i=e.toString().replace(Gr,""),a=i.match(Br),o(a[1].split(zr),function(e){e.replace(Wr,function(e,t,n){r.push(n)})})}e.$inject=r}}else hr(e)?(s=e.length-1,oe(e[s],"fn"),r=e.slice(0,s)):oe(e,"fn",!0);return r}function Be(e,t){function r(e){return function(t,n){return y(t)?void o(t,l(e)):e(t,n)}}function i(e,t){if(ae(e,"service"),(E(t)||hr(t))&&(t=A.instantiate(t)),!t.$get)throw Kr("pget","Provider '{0}' must define $get factory method.",e);return S[e+w]=t}function a(e,t){return function(){var n=C.invoke(t,this);if(v(n))throw Kr("undef","Provider '{0}' must return a value from $get factory method.",e);return n}}function s(e,t,n){return i(e,{$get:n!==!1?a(e,t):t})}function u(e,t){return s(e,["$injector",function(e){return e.instantiate(t)}])}function c(e,t){return s(e,$(t),!1)}function f(e,t){ae(e,"constant"),S[e]=t,M[e]=t}function d(e,t){var n=A.get(e+w),r=n.$get;n.$get=function(){var e=C.invoke(r,n);return C.invoke(t,null,{$delegate:e})}}function h(e){var t,n=[];return o(e,function(e){function r(e){var t,n;for(t=0,n=e.length;n>t;t++){var r=e[t],i=A.get(r[0]);i[r[1]].apply(i,r[2])}}if(!k.get(e)){k.put(e,!0);try{b(e)?(t=ir(e),n=n.concat(h(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):E(e)?n.push(A.invoke(e)):hr(e)?n.push(A.invoke(e)):oe(e,"module")}catch(i){throw hr(e)&&(e=e[e.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),Kr("modulerr","Failed to instantiate module {0} due to:\n{1}",e,i.stack||i.message||i)}}}),n}function m(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===g)throw Kr("cdep","Circular dependency found: {0}",t+" <- "+x.join(" <- "));return e[t]}try{return x.unshift(t),e[t]=g,e[t]=n(t,r)}catch(i){throw e[t]===g&&delete e[t],i}finally{x.shift()}}function i(e,n,i,o){"string"==typeof i&&(o=i,i=null);var a,s,l,u=[],c=Be.$$annotate(e,t,o);for(s=0,a=c.length;a>s;s++){if(l=c[s],"string"!=typeof l)throw Kr("itkn","Incorrect injection token! Expected service name as string, got {0}",l);u.push(i&&i.hasOwnProperty(l)?i[l]:r(l,o))}return hr(e)&&(e=e[a]),e.apply(n,u)}function o(e,t,n){var r=Object.create((hr(e)?e[e.length-1]:e).prototype||null),o=i(e,r,t,n);return y(o)||E(o)?o:r}return{invoke:i,instantiate:o,get:r,annotate:Be.$$annotate,has:function(t){return S.hasOwnProperty(t+w)||e.hasOwnProperty(t)}}}t=t===!0;var g={},w="Provider",x=[],k=new qe([],!0),S={$provide:{provider:r(i),factory:r(s),service:r(u),value:r(c),constant:r(f),decorator:d}},A=S.$injector=m(S,function(e,t){throw cr.isString(t)&&x.push(t),Kr("unpr","Unknown provider: {0}",x.join(" <- "))}),M={},C=M.$injector=m(M,function(e,t){var r=A.get(e+w,t);return C.invoke(r.$get,r,n,e)});return o(h(e),function(e){C.invoke(e||p)}),C}function ze(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return Array.prototype.some.call(e,function(e){return"a"===I(e)?(t=e,!0):void 0}),t}function o(){var e=s.yOffset;if(E(e))e=e();else if(N(e)){var n=e[0],r=t.getComputedStyle(n);e="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else w(e)||(e=0);return e}function a(e){if(e){e.scrollIntoView();var n=o();if(n){var r=e.getBoundingClientRect().top;t.scrollBy(0,r-n)}}else t.scrollTo(0,0)}function s(){var e,t=n.hash();t?(e=l.getElementById(t))?a(e):(e=i(l.getElementsByName(t)))?a(e):"top"===t&&a(null):a(null)}var l=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){e===t&&""===e||_e(function(){r.$evalAsync(s)})}),s}]}function We(){this.$get=["$$rAF","$timeout",function(e,t){return e.supported?function(t){return e(t)}:function(e){return t(e,0,!1)}}]}function Ge(e,t,r,i){function a(e){try{e.apply(null,U(arguments,1))}finally{if(k--,0===k)for(;S.length;)try{S.pop()()}catch(t){r.error(t)}}}function s(e){var t=e.indexOf("#");return-1===t?"":e.substr(t)}function l(e,t){!function n(){o(M,function(e){e()}),A=t(n,e)}()}function u(){f(),d()}function c(){try{return y.state}catch(e){}}function f(){C=c(),C=v(C)?null:C,F(C,_)&&(C=_),_=C}function d(){T===m.url()&&O===C||(T=m.url(),O=C,o(R,function(e){e(m.url(),C)}))}function h(e){try{return decodeURIComponent(e)}catch(t){return e}}var m=this,$=t[0],g=e.location,y=e.history,w=e.setTimeout,x=e.clearTimeout,E={};m.isMock=!1;var k=0,S=[];m.$$completeOutstandingRequest=a,m.$$incOutstandingRequestCount=function(){k++},m.notifyWhenNoOutstandingRequests=function(e){o(M,function(e){e()}),0===k?e():S.push(e)};var A,M=[];m.addPollFn=function(e){return v(A)&&l(100,w),M.push(e),e};var C,O,T=g.href,P=t.find("base"),N=null;f(),O=C,m.url=function(t,n,r){if(v(r)&&(r=null),g!==e.location&&(g=e.location),y!==e.history&&(y=e.history),t){var o=O===r;if(T===t&&(!i.history||o))return m;var a=T&&wt(T)===wt(t);return T=t,O=r,!i.history||a&&o?(a&&!N||(N=t),n?g.replace(t):a?g.hash=s(t):g.href=t):(y[n?"replaceState":"pushState"](r,"",t),f(),O=C),m}return N||g.href.replace(/%27/g,"'")},m.state=function(){return C};var R=[],I=!1,_=null;m.onUrlChange=function(t){return I||(i.history&&nr(e).on("popstate",u),nr(e).on("hashchange",u),I=!0),R.push(t),t},m.$$checkUrlChange=d,m.baseHref=function(){var e=P.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""};var D={},V="",j=m.baseHref();m.cookies=function(e,t){var i,o,a,s,l;if(!e){if($.cookie!==V)for(V=$.cookie,o=V.split("; "),D={},s=0;s<o.length;s++)a=o[s],l=a.indexOf("="),l>0&&(e=h(a.substring(0,l)),D[e]===n&&(D[e]=h(a.substring(l+1))));return D}t===n?$.cookie=encodeURIComponent(e)+"=;path="+j+";expires=Thu, 01 Jan 1970 00:00:00 GMT":b(t)&&(i=($.cookie=encodeURIComponent(e)+"="+encodeURIComponent(t)+";path="+j).length+1,i>4096&&r.warn("Cookie '"+e+"' possibly not set or overflowed because it was too large ("+i+" > 4096 bytes)!"))},m.defer=function(e,t){var n;return k++,n=w(function(){delete E[n],a(e)},t||0),E[n]=!0,n},m.defer.cancel=function(e){return E[e]?(delete E[e],x(e),a(p),!0):!1}}function Ke(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new Ge(e,r,t,n)}]}function Ye(){this.$get=function(){function e(e,n){function i(e){e!=d&&(h?h==e&&(h=e.n):h=e,o(e.n,e.p),o(e,d),d=e,d.n=null)}function o(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in t)throw r("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var a=0,s=f({},n,{id:e}),l={},u=n&&n.capacity||Number.MAX_VALUE,c={},d=null,h=null;return t[e]={put:function(e,t){if(u<Number.MAX_VALUE){var n=c[e]||(c[e]={key:e});i(n)}if(!v(t))return e in l||a++,l[e]=t,a>u&&this.remove(h.key),t},get:function(e){if(u<Number.MAX_VALUE){var t=c[e];if(!t)return;i(t)}return l[e]},remove:function(e){if(u<Number.MAX_VALUE){var t=c[e];if(!t)return;t==d&&(d=t.p),t==h&&(h=t.n),o(t.n,t.p),delete c[e]}delete l[e],a--},removeAll:function(){l={},a=0,c={},d=h=null},destroy:function(){l=null,s=null,c=null,delete t[e]},info:function(){return f({},s,{size:a})}}}var t={};return e.info=function(){var e={};return o(t,function(t,n){e[n]=t.info()}),e},e.get=function(e){return t[e]},e}}function Je(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function Xe(e,r){function i(e,t){var n=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,r={};return o(e,function(e,i){var o=e.match(n);if(!o)throw Xr("iscp","Invalid isolate scope definition for directive '{0}'. Definition: {... {1}: '{2}' ...}",t,i,e);r[i]={mode:o[1][0],collection:"*"===o[2],optional:"?"===o[3],attrName:o[4]||i}}),r}var a={},s="Directive",u=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,c=/(([\w\-]+)(?:\:([^;]+))?;?)/,d=R("ngSrc,ngSrcset,src,srcset"),v=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,w=/^(on[a-z]+|formaction)$/;this.directive=function k(t,n){return ae(t,"directive"),b(t)?(ie(n,"directiveFactory"),a.hasOwnProperty(t)||(a[t]=[],e.factory(t+s,["$injector","$exceptionHandler",function(e,n){var r=[];return o(a[t],function(o,a){try{var s=e.invoke(o);E(s)?s={compile:$(s)}:!s.compile&&s.link&&(s.compile=$(s.link)),s.priority=s.priority||0,s.index=a,s.name=s.name||t,s.require=s.require||s.controller&&s.name,s.restrict=s.restrict||"EA",y(s.scope)&&(s.$$isolateBindings=i(s.scope,s.name)),r.push(s)}catch(l){n(l)}}),r}])),a[t].push(n)):o(t,l(k)),this},this.aHrefSanitizationWhitelist=function(e){return g(e)?(r.aHrefSanitizationWhitelist(e),this):r.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return g(e)?(r.imgSrcSanitizationWhitelist(e),this):r.imgSrcSanitizationWhitelist()};var x=!0;this.debugInfoEnabled=function(e){return g(e)?(x=e,this):x},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(e,r,i,l,$,g,k,S,M,C,O){function T(e,t){try{e.addClass(t)}catch(n){}}function P(e,t,n,r,i){e instanceof nr||(e=nr(e)),o(e,function(t,n){t.nodeType==xr&&t.nodeValue.match(/\S+/)&&(e[n]=nr(t).wrap("<span></span>").parent()[0])});var a=R(e,t,e,n,r,i);P.$$addScopeClass(e);var s=null;return function(t,n,r){ie(t,"scope"),r=r||{};var i=r.parentBoundTranscludeFn,o=r.transcludeControllers,l=r.futureParentElement;i&&i.$$boundTransclude&&(i=i.$$boundTransclude),s||(s=N(l));var u;if(u="html"!==s?nr(Z(s,nr("<div>").append(e).html())):n?Ur.clone.call(e):e,o)for(var c in o)u.data("$"+c+"Controller",o[c].instance);return P.$$addScopeInfo(u,t),n&&n(u,t),a&&a(t,u,u,i),u}}function N(e){var t=e&&e[0];return t&&"foreignobject"!==I(t)&&t.toString().match(/SVG/)?"svg":"html"}function R(e,t,r,i,o,a){function s(e,r,i,o){var a,s,l,u,c,f,d,h,$;if(p){var v=r.length;for($=new Array(v),c=0;c<m.length;c+=3)d=m[c],$[d]=r[d]}else $=r;for(c=0,f=m.length;f>c;)l=$[m[c++]],a=m[c++],s=m[c++],a?(a.scope?(u=e.$new(),P.$$addScopeInfo(nr(l),u)):u=e,h=a.transcludeOnThisElement?D(e,a.transclude,o,a.elementTranscludeOnThisElement):!a.templateOnThisElement&&o?o:!o&&t?D(e,t):null,a(s,u,l,i,h)):s&&s(e,l.childNodes,n,o)}for(var l,u,c,f,d,h,p,m=[],$=0;$<e.length;$++)l=new ae,u=V(e[$],[],l,0===$?i:n,o),c=u.length?L(u,e[$],l,t,r,null,[],[],a):null,c&&c.scope&&P.$$addScopeClass(l.$$element),d=c&&c.terminal||!(f=e[$].childNodes)||!f.length?null:R(f,c?(c.transcludeOnThisElement||!c.templateOnThisElement)&&c.transclude:t),(c||d)&&(m.push($,c,d),h=!0,p=p||c),a=null;return h?s:null}function D(e,t,n,r){var i=function(r,i,o,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})};return i}function V(e,t,n,r,i){var o,a,s=e.nodeType,l=n.$attr;switch(s){case br:B(t,Ze(I(e)),"E",r,i);for(var f,d,h,p,m,$,v=e.attributes,g=0,w=v&&v.length;w>g;g++){var x=!1,E=!1;f=v[g],d=f.name,m=pr(f.value),p=Ze(d),($=fe.test(p))&&(d=d.replace(Zr,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()}));var k=p.replace(/(Start|End)$/,"");W(k)&&p===k+"Start"&&(x=d,E=d.substr(0,d.length-5)+"end",d=d.substr(0,d.length-6)),h=Ze(d.toLowerCase()),l[h]=d,!$&&n.hasOwnProperty(h)||(n[h]=m,De(e,h)&&(n[h]=!0)),ee(e,t,m,h,$),B(t,h,"A",r,i,x,E)}if(a=e.className,y(a)&&(a=a.animVal),b(a)&&""!==a)for(;o=c.exec(a);)h=Ze(o[2]),B(t,h,"C",r,i)&&(n[h]=pr(o[3])),a=a.substr(o.index+o[0].length);break;case xr:X(t,e.nodeValue);break;case Er:try{o=u.exec(e.nodeValue),o&&(h=Ze(o[1]),B(t,h,"M",r,i)&&(n[h]=pr(o[2])))}catch(S){}}return t.sort(Y),t}function j(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw Xr("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);e.nodeType==br&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(i>0)}else r.push(e);return nr(r)}function q(e,t,n){return function(r,i,o,a,s){return i=j(i[0],t,n),e(r,i,o,a,s)}}function L(e,a,s,l,u,c,f,d,h){function p(e,t,n,r){e&&(n&&(e=q(e,n,r)),e.require=S.require,e.directiveName=M,(I===S||S.$$isolateScope)&&(e=re(e,{isolateScope:!0})),f.push(e)),t&&(n&&(t=q(t,n,r)),t.require=S.require,t.directiveName=M,(I===S||S.$$isolateScope)&&(t=re(t,{isolateScope:!0})),d.push(t))}function m(e,t,n,r){var i,a,s="data",l=!1,u=n;if(b(t)){if(a=t.match(v),t=t.substring(a[0].length),a[3]&&(a[1]?a[3]=null:a[1]=a[3]),"^"===a[1]?s="inheritedData":"^^"===a[1]&&(s="inheritedData",u=n.parent()),"?"===a[2]&&(l=!0),i=null,r&&"data"===s&&(i=r[t])&&(i=i.instance),i=i||u[s]("$"+t+"Controller"),!i&&!l)throw Xr("ctreq","Controller '{0}', required by directive '{1}', can't be found!",t,e);return i||null}return hr(t)&&(i=[],o(t,function(t){i.push(m(e,t,n,r))})),i}function w(e,t,i,l,u){function c(e,t,r){var i;return A(e)||(r=t,t=e,e=n),W&&(i=w),r||(r=W?E.parent():E),u(e,t,i,r,O)}var h,p,v,y,b,w,x,E,S;if(a===i?(S=s,E=s.$$element):(E=nr(i),S=new ae(E,s)),I&&(b=t.$new(!0)),u&&(x=c,x.$$boundTransclude=u),R&&(k={},w={},o(R,function(e){var n,r={$scope:e===I||e.$$isolateScope?b:t,$element:E,$attrs:S,$transclude:x};y=e.controller,"@"==y&&(y=S[e.name]),n=g(y,r,!0,e.controllerAs),w[e.name]=n,W||E.data("$"+e.name+"Controller",n.instance),k[e.name]=n})),I){P.$$addScopeInfo(E,b,!0,!(_&&(_===I||_===I.$$originalDirective))),P.$$addScopeClass(E,!0);var M=k&&k[I.name],C=b;M&&M.identifier&&I.bindToController===!0&&(C=M.instance),o(b.$$isolateBindings=I.$$isolateBindings,function(e,n){var i,o,a,s,l=e.attrName,u=e.optional,c=e.mode;switch(c){case"@":S.$observe(l,function(e){C[n]=e}),S.$$observers[l].$$scope=t,S[l]&&(C[n]=r(S[l])(t));break;case"=":if(u&&!S[l])return;o=$(S[l]),s=o.literal?F:function(e,t){return e===t||e!==e&&t!==t},a=o.assign||function(){throw i=C[n]=o(t),Xr("nonassign","Expression '{0}' used with directive '{1}' is non-assignable!",S[l],I.name)},i=C[n]=o(t);var f=function(e){return s(e,C[n])||(s(e,i)?a(t,e=C[n]):C[n]=e),i=e};f.$stateful=!0;var d;d=e.collection?t.$watchCollection(S[l],f):t.$watch($(S[l],f),null,o.literal),b.$on("$destroy",d);break;case"&":o=$(S[l]),C[n]=function(e){return o(t,e)}}})}for(k&&(o(k,function(e){e()}),k=null),h=0,p=f.length;p>h;h++)v=f[h],oe(v,v.isolateScope?b:t,E,S,v.require&&m(v.directiveName,v.require,E,w),x);var O=t;for(I&&(I.template||null===I.templateUrl)&&(O=b),e&&e(O,i.childNodes,n,u),h=d.length-1;h>=0;h--)v=d[h],oe(v,v.isolateScope?b:t,E,S,v.require&&m(v.directiveName,v.require,E,w),x)}h=h||{};for(var x,k,S,M,C,O,T,N=-Number.MAX_VALUE,R=h.controllerDirectives,I=h.newIsolateScopeDirective,_=h.templateDirective,D=h.nonTlbTranscludeDirective,L=!1,B=!1,W=h.hasElementTranscludeDirective,Y=s.$$element=nr(a),X=c,Q=l,ee=0,ne=e.length;ne>ee;ee++){S=e[ee];var ie=S.$$start,se=S.$$end;if(ie&&(Y=j(a,ie,se)),C=n,N>S.priority)break;if((T=S.scope)&&(S.templateUrl||(y(T)?(J("new/isolated scope",I||x,S,Y),I=S):J("new/isolated scope",I,S,Y)),x=x||S),M=S.name,!S.templateUrl&&S.controller&&(T=S.controller,R=R||{},J("'"+M+"' controller",R[M],S,Y),R[M]=S),(T=S.transclude)&&(L=!0,S.$$tlb||(J("transclusion",D,S,Y),D=S),"element"==T?(W=!0,N=S.priority,C=Y,Y=s.$$element=nr(t.createComment(" "+M+": "+s[M]+" ")),a=Y[0],te(u,U(C),a),Q=P(C,l,N,X&&X.name,{nonTlbTranscludeDirective:D})):(C=nr(we(a)).contents(),Y.empty(),Q=P(C,l))),S.template)if(B=!0,J("template",_,S,Y),_=S,T=E(S.template)?S.template(Y,s):S.template,T=ce(T),S.replace){if(X=S,C=$e(T)?[]:et(Z(S.templateNamespace,pr(T))),a=C[0],1!=C.length||a.nodeType!==br)throw Xr("tplrt","Template for directive '{0}' must have exactly one root element. {1}",M,"");te(u,Y,a);var le={$attr:{}},ue=V(a,[],le),fe=e.splice(ee+1,e.length-(ee+1));I&&H(ue),e=e.concat(ue).concat(fe),G(s,le),ne=e.length}else Y.html(T);if(S.templateUrl)B=!0,J("template",_,S,Y),_=S,S.replace&&(X=S),w=K(e.splice(ee,e.length-ee),Y,s,u,L&&Q,f,d,{controllerDirectives:R,newIsolateScopeDirective:I,templateDirective:_,nonTlbTranscludeDirective:D}),ne=e.length;else if(S.compile)try{O=S.compile(Y,s,Q),E(O)?p(null,O,ie,se):O&&p(O.pre,O.post,ie,se)}catch(de){i(de,z(Y))}S.terminal&&(w.terminal=!0,N=Math.max(N,S.priority))}return w.scope=x&&x.scope===!0,w.transcludeOnThisElement=L,w.elementTranscludeOnThisElement=W,w.templateOnThisElement=B,w.transclude=Q,h.hasElementTranscludeDirective=W,w}function H(e){for(var t=0,n=e.length;n>t;t++)e[t]=h(e[t],{$$isolateScope:!0})}function B(t,r,o,l,u,c,f){if(r===u)return null;var d=null;if(a.hasOwnProperty(r))for(var p,m=e.get(r+s),$=0,v=m.length;v>$;$++)try{p=m[$],(l===n||l>p.priority)&&-1!=p.restrict.indexOf(o)&&(c&&(p=h(p,{
$$start:c,$$end:f})),t.push(p),d=p)}catch(g){i(g)}return d}function W(t){if(a.hasOwnProperty(t))for(var n,r=e.get(t+s),i=0,o=r.length;o>i;i++)if(n=r[i],n.multiElement)return!0;return!1}function G(e,t){var n=t.$attr,r=e.$attr,i=e.$$element;o(e,function(r,i){"$"!=i.charAt(0)&&(t[i]&&t[i]!==r&&(r+=("style"===i?";":" ")+t[i]),e.$set(i,r,!0,n[i]))}),o(t,function(t,o){"class"==o?(T(i,t),e["class"]=(e["class"]?e["class"]+" ":"")+t):"style"==o?(i.attr("style",i.attr("style")+";"+t),e.style=(e.style?e.style+";":"")+t):"$"==o.charAt(0)||e.hasOwnProperty(o)||(e[o]=t,r[o]=n[o])})}function K(e,t,n,r,i,a,s,u){var c,f,d=[],p=t[0],m=e.shift(),$=h(m,{templateUrl:null,transclude:null,replace:null,$$originalDirective:m}),v=E(m.templateUrl)?m.templateUrl(t,n):m.templateUrl,g=m.templateNamespace;return t.empty(),l(v).then(function(l){var h,b,w,x;if(l=ce(l),m.replace){if(w=$e(l)?[]:et(Z(g,pr(l))),h=w[0],1!=w.length||h.nodeType!==br)throw Xr("tplrt","Template for directive '{0}' must have exactly one root element. {1}",m.name,v);b={$attr:{}},te(r,t,h);var E=V(h,[],b);y(m.scope)&&H(E),e=E.concat(e),G(n,b)}else h=p,t.html(l);for(e.unshift($),c=L(e,h,n,i,t,m,a,s,u),o(r,function(e,n){e==h&&(r[n]=t[0])}),f=R(t[0].childNodes,i);d.length;){var k=d.shift(),S=d.shift(),A=d.shift(),M=d.shift(),C=t[0];if(!k.$$destroyed){if(S!==p){var O=S.className;u.hasElementTranscludeDirective&&m.replace||(C=we(h)),te(A,nr(S),C),T(nr(C),O)}x=c.transcludeOnThisElement?D(k,c.transclude,M):M,c(f,k,C,r,x)}}d=null}),function(e,t,n,r,i){var o=i;t.$$destroyed||(d?d.push(t,n,r,o):(c.transcludeOnThisElement&&(o=D(t,c.transclude,i)),c(f,t,n,r,o)))}}function Y(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function J(e,t,n,r){if(t)throw Xr("multidir","Multiple directives [{0}, {1}] asking for {2} on: {3}",t.name,n.name,e,z(r))}function X(e,t){var n=r(t,!0);n&&e.push({priority:0,compile:function(e){var t=e.parent(),r=!!t.length;return r&&P.$$addBindingClass(t),function(e,t){var i=t.parent();r||P.$$addBindingClass(i),P.$$addBindingInfo(i,n.expressions),e.$watch(n,function(e){t[0].nodeValue=e})}}})}function Z(e,n){switch(e=Jn(e||"html")){case"svg":case"math":var r=t.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function Q(e,t){if("srcdoc"==t)return M.HTML;var n=I(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?M.RESOURCE_URL:void 0}function ee(e,t,n,i,o){var a=Q(e,i);o=d[i]||o;var s=r(n,!0,a,o);if(s){if("multiple"===i&&"select"===I(e))throw Xr("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",z(e));t.push({priority:100,compile:function(){return{pre:function(e,t,l){var u=l.$$observers||(l.$$observers={});if(w.test(i))throw Xr("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");var c=l[i];c!==n&&(s=c&&r(c,!0,a,o),n=c),s&&(l[i]=s(e),(u[i]||(u[i]=[])).$$inter=!0,(l.$$observers&&l.$$observers[i].$$scope||e).$watch(s,function(e,t){"class"===i&&e!=t?l.$updateClass(e,t):l.$set(i,e)}))}}}})}}function te(e,n,r){var i,o,a=n[0],s=n.length,l=a.parentNode;if(e)for(i=0,o=e.length;o>i;i++)if(e[i]==a){e[i++]=r;for(var u=i,c=u+s-1,f=e.length;f>u;u++,c++)f>c?e[u]=e[c]:delete e[u];e.length-=s-1,e.context===a&&(e.context=r);break}l&&l.replaceChild(r,a);var d=t.createDocumentFragment();d.appendChild(a),nr(r).data(nr(a).data()),rr?(dr=!0,rr.cleanData([a])):delete nr.cache[a[nr.expando]];for(var h=1,p=n.length;p>h;h++){var m=n[h];nr(m).remove(),d.appendChild(m),delete n[h]}n[0]=r,n.length=1}function re(e,t){return f(function(){return e.apply(null,arguments)},e,t)}function oe(e,t,n,r,o,a){try{e(t,n,r,o,a)}catch(s){i(s,z(n))}}var ae=function(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;r>n;n++)i=o[n],this[i]=t[i]}else this.$attr={};this.$$element=e};ae.prototype={$normalize:Ze,$addClass:function(e){e&&e.length>0&&C.addClass(this.$$element,e)},$removeClass:function(e){e&&e.length>0&&C.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=Qe(e,t);n&&n.length&&C.addClass(this.$$element,n);var r=Qe(t,e);r&&r.length&&C.removeClass(this.$$element,r)},$set:function(e,t,r,a){var s,l=this.$$element[0],u=De(l,e),c=Ve(l,e),f=e;if(u?(this.$$element.prop(e,t),a=u):c&&(this[c]=t,f=c),this[e]=t,a?this.$attr[e]=a:(a=this.$attr[e],a||(this.$attr[e]=a=ne(e,"-"))),s=I(this.$$element),"a"===s&&"href"===e||"img"===s&&"src"===e)this[e]=t=O(t,"src"===e);else if("img"===s&&"srcset"===e){for(var d="",h=pr(t),p=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,m=/\s/.test(h)?p:/(,)/,$=h.split(m),v=Math.floor($.length/2),g=0;v>g;g++){var y=2*g;d+=O(pr($[y]),!0),d+=" "+pr($[y+1])}var b=pr($[2*g]).split(/\s/);d+=O(pr(b[0]),!0),2===b.length&&(d+=" "+pr(b[1])),this[e]=t=d}r!==!1&&(null===t||t===n?this.$$element.removeAttr(a):this.$$element.attr(a,t));var w=this.$$observers;w&&o(w[f],function(e){try{e(t)}catch(n){i(n)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=ue()),i=r[e]||(r[e]=[]);return i.push(t),k.$evalAsync(function(){!i.$$inter&&n.hasOwnProperty(e)&&t(n[e])}),function(){_(i,t)}}};var se=r.startSymbol(),le=r.endSymbol(),ce="{{"==se||"}}"==le?m:function(e){return e.replace(/\{\{/g,se).replace(/}}/g,le)},fe=/^ngAttr[A-Z]/;return P.$$addBindingInfo=x?function(e,t){var n=e.data("$binding")||[];hr(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:p,P.$$addBindingClass=x?function(e){T(e,"ng-binding")}:p,P.$$addScopeInfo=x?function(e,t,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(i,t)}:p,P.$$addScopeClass=x?function(e,t){T(e,t?"ng-isolate-scope":"ng-scope")}:p,P}]}function Ze(e){return me(e.replace(Zr,""))}function Qe(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/);e:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue e;n+=(n.length>0?" ":"")+a}return n}function et(e){e=nr(e);var t=e.length;if(1>=t)return e;for(;t--;){var n=e[t];n.nodeType===Er&&ar.call(e,t,1)}return e}function tt(){var e={},t=!1,i=/^(\S+)(\s+as\s+(\w+))?$/;this.register=function(t,n){ae(t,"controller"),y(t)?f(e,t):e[t]=n},this.allowGlobals=function(){t=!0},this.$get=["$injector","$window",function(o,a){function s(e,t,n,i){if(!e||!y(e.$scope))throw r("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,t);e.$scope[t]=n}return function(r,l,u,c){var d,h,p,m;if(u=u===!0,c&&b(c)&&(m=c),b(r)){if(h=r.match(i),!h)throw Qr("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",r);p=h[1],m=m||h[3],r=e.hasOwnProperty(p)?e[p]:se(l.$scope,p,!0)||(t?se(a,p,!0):n),oe(r,p,!0)}if(u){var $=(hr(r)?r[r.length-1]:r).prototype;return d=Object.create($||null),m&&s(l,m,d,p||r.name),f(function(){return o.invoke(r,d,l,p),d},{instance:d,identifier:m})}return d=o.instantiate(r,l,p),m&&s(l,m,d,p||r.name),d}}]}function nt(){this.$get=["$window",function(e){return nr(e.document)}]}function rt(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function it(e,t){if(b(e)){var n=e.replace(ii,"").trim();if(n){var r=t("Content-Type");(r&&0===r.indexOf(ei)||ot(n))&&(e=B(n))}}return e}function ot(e){var t=e.match(ni);return t&&ri[t[0]].test(e)}function at(e){var t,n,r,i=ue();return e?(o(e.split("\n"),function(e){r=e.indexOf(":"),t=Jn(pr(e.substr(0,r))),n=pr(e.substr(r+1)),t&&(i[t]=i[t]?i[t]+", "+n:n)}),i):i}function st(e){var t=y(e)?e:n;return function(n){if(t||(t=at(e)),n){var r=t[Jn(n)];return void 0===r&&(r=null),r}return t}}function lt(e,t,n,r){return E(r)?r(e,t,n):(o(r,function(r){e=r(e,t,n)}),e)}function ut(e){return e>=200&&300>e}function ct(){var e=this.defaults={transformResponse:[it],transformRequest:[function(e){return!y(e)||M(e)||O(e)||C(e)?e:H(e)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:V(ti),put:V(ti),patch:V(ti)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN"},t=!1;this.useApplyAsync=function(e){return g(e)?(t=!!e,this):t};var i=this.interceptors=[];this.$get=["$httpBackend","$browser","$cacheFactory","$rootScope","$q","$injector",function(a,l,u,c,d,h){function p(t){function i(e){var t=f({},e);return e.data?t.data=lt(e.data,e.headers,e.status,l.transformResponse):t.data=e.data,ut(e.status)?t:d.reject(t)}function a(e){var t,n={};return o(e,function(e,r){E(e)?(t=e(),null!=t&&(n[r]=t)):n[r]=e}),n}function s(t){var n,r,i,o=e.headers,s=f({},t.headers);o=f({},o.common,o[Jn(t.method)]);e:for(n in o){r=Jn(n);for(i in s)if(Jn(i)===r)continue e;s[n]=o[n]}return a(s)}if(!cr.isObject(t))throw r("$http")("badreq","Http request configuration must be an object.  Received: {0}",t);var l=f({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse},t);l.headers=s(t),l.method=Zn(l.method);var u=function(t){var r=t.headers,a=lt(t.data,st(r),n,t.transformRequest);return v(a)&&o(r,function(e,t){"content-type"===Jn(t)&&delete r[t]}),v(t.withCredentials)&&!v(e.withCredentials)&&(t.withCredentials=e.withCredentials),w(t,a).then(i,i)},c=[u,n],h=d.when(l);for(o(A,function(e){(e.request||e.requestError)&&c.unshift(e.request,e.requestError),(e.response||e.responseError)&&c.push(e.response,e.responseError)});c.length;){var p=c.shift(),m=c.shift();h=h.then(p,m)}return h.success=function(e){return oe(e,"fn"),h.then(function(t){e(t.data,t.status,t.headers,l)}),h},h.error=function(e){return oe(e,"fn"),h.then(null,function(t){e(t.data,t.status,t.headers,l)}),h},h}function m(e){o(arguments,function(e){p[e]=function(t,n){return p(f(n||{},{method:e,url:t}))}})}function $(e){o(arguments,function(e){p[e]=function(t,n,r){return p(f(r||{},{method:e,url:t,data:n}))}})}function w(r,i){function o(e,n,r,i){function o(){s(n,e,r,i)}h&&(ut(e)?h.put(x,[e,n,at(r),i]):h.remove(x)),t?c.$applyAsync(o):(o(),c.$$phase||c.$apply())}function s(e,t,n,i){t=t>=-1?t:0,(ut(t)?$.resolve:$.reject)({data:e,status:t,headers:st(n),config:r,statusText:i})}function u(e){s(e.data,e.status,V(e.headers()),e.statusText)}function f(){var e=p.pendingRequests.indexOf(r);-1!==e&&p.pendingRequests.splice(e,1)}var h,m,$=d.defer(),b=$.promise,w=r.headers,x=k(r.url,r.params);if(p.pendingRequests.push(r),b.then(f,f),!r.cache&&!e.cache||r.cache===!1||"GET"!==r.method&&"JSONP"!==r.method||(h=y(r.cache)?r.cache:y(e.cache)?e.cache:S),h&&(m=h.get(x),g(m)?P(m)?m.then(u,u):hr(m)?s(m[1],m[0],V(m[2]),m[3]):s(m,200,{},"OK"):h.put(x,b)),v(m)){var E=an(r.url)?l.cookies()[r.xsrfCookieName||e.xsrfCookieName]:n;E&&(w[r.xsrfHeaderName||e.xsrfHeaderName]=E),a(r.method,x,i,o,w,r.timeout,r.withCredentials,r.responseType)}return b}function k(e,t){if(!t)return e;var n=[];return s(t,function(e,t){null===e||v(e)||(hr(e)||(e=[e]),o(e,function(e){y(e)&&(e=x(e)?e.toISOString():H(e)),n.push(J(t)+"="+J(e))}))}),n.length>0&&(e+=(-1==e.indexOf("?")?"?":"&")+n.join("&")),e}var S=u("$http"),A=[];return o(i,function(e){A.unshift(b(e)?h.get(e):h.invoke(e))}),p.pendingRequests=[],m("get","delete","head","jsonp"),$("post","put","patch"),p.defaults=e,p}]}function ft(){return new e.XMLHttpRequest}function dt(){this.$get=["$browser","$window","$document",function(e,t,n){return ht(e,ft,e.defer,t.angular.callbacks,n[0])}]}function ht(e,t,r,i,a){function s(e,t,n){var r=a.createElement("script"),o=null;return r.type="text/javascript",r.src=e,r.async=!0,o=function(e){Tr(r,"load",o),Tr(r,"error",o),a.body.removeChild(r),r=null;var s=-1,l="unknown";e&&("load"!==e.type||i[t].called||(e={type:"error"}),l=e.type,s="error"===e.type?404:200),n&&n(s,l)},Or(r,"load",o),Or(r,"error",o),a.body.appendChild(r),o}return function(a,l,u,c,f,d,h,m){function $(){b&&b(),w&&w.abort()}function v(t,i,o,a,s){k!==n&&r.cancel(k),b=w=null,t(i,o,a,s),e.$$completeOutstandingRequest(p)}if(e.$$incOutstandingRequestCount(),l=l||e.url(),"jsonp"==Jn(a)){var y="_"+(i.counter++).toString(36);i[y]=function(e){i[y].data=e,i[y].called=!0};var b=s(l.replace("JSON_CALLBACK","angular.callbacks."+y),y,function(e,t){v(c,e,i[y].data,"",t),i[y]=p})}else{var w=t();w.open(a,l,!0),o(f,function(e,t){g(e)&&w.setRequestHeader(t,e)}),w.onload=function(){var e=w.statusText||"",t="response"in w?w.response:w.responseText,n=1223===w.status?204:w.status;0===n&&(n=t?200:"file"==on(l).protocol?404:0),v(c,n,t,w.getAllResponseHeaders(),e)};var x=function(){v(c,-1,null,null,"")};if(w.onerror=x,w.onabort=x,h&&(w.withCredentials=!0),m)try{w.responseType=m}catch(E){if("json"!==m)throw E}w.send(u||null)}if(d>0)var k=r($,d);else P(d)&&d.then($)}}function pt(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(o,a,d,h){function p(n){return n.replace(u,e).replace(c,t)}function m(e){try{return e=O(e),h&&!g(e)?e:T(e)}catch(t){var n=oi("interr","Can't interpolate: {0}\n{1}",o,t.toString());r(n)}}h=!!h;for(var $,y,b,w=0,x=[],k=[],S=o.length,A=[],M=[];S>w;){if(-1==($=o.indexOf(e,w))||-1==(y=o.indexOf(t,$+s))){w!==S&&A.push(p(o.substring(w)));break}w!==$&&A.push(p(o.substring(w,$))),b=o.substring($+s,y),x.push(b),k.push(n(b,m)),w=y+l,M.push(A.length),A.push("")}if(d&&A.length>1)throw oi("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",o);if(!a||x.length){var C=function(e){for(var t=0,n=x.length;n>t;t++){if(h&&v(e[t]))return;A[M[t]]=e[t]}return A.join("")},O=function(e){return d?i.getTrusted(d,e):i.valueOf(e)},T=function(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=H(e)}return e};return f(function(e){var t=0,n=x.length,i=new Array(n);try{for(;n>t;t++)i[t]=k[t](e);return C(i)}catch(a){var s=oi("interr","Can't interpolate: {0}\n{1}",o,a.toString());r(s)}},{exp:o,expressions:x,$$watchDelegate:function(e,t,n){var r;return e.$watchGroup(k,function(n,i){var o=C(n);E(t)&&t.call(this,o,n!==i?r:o,e),r=o},n)}})}}var s=e.length,l=t.length,u=new RegExp(e.replace(/./g,o),"g"),c=new RegExp(t.replace(/./g,o),"g");return a.startSymbol=function(){return e},a.endSymbol=function(){return t},a}]}function mt(){this.$get=["$rootScope","$window","$q","$$q",function(e,t,n,r){function i(i,a,s,l){var u=t.setInterval,c=t.clearInterval,f=0,d=g(l)&&!l,h=(d?r:n).defer(),p=h.promise;return s=g(s)?s:0,p.then(null,null,i),p.$$intervalId=u(function(){h.notify(f++),s>0&&f>=s&&(h.resolve(f),c(p.$$intervalId),delete o[p.$$intervalId]),d||e.$apply()},a),o[p.$$intervalId]=h,p}var o={};return i.cancel=function(e){return e&&e.$$intervalId in o?(o[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete o[e.$$intervalId],!0):!1},i}]}function $t(){this.$get=function(){return{id:"en-us",NUMBER_FORMATS:{DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{minInt:1,minFrac:0,maxFrac:3,posPre:"",posSuf:"",negPre:"-",negSuf:"",gSize:3,lgSize:3},{minInt:1,minFrac:2,maxFrac:2,posPre:"¤",posSuf:"",negPre:"(¤",negSuf:")",gSize:3,lgSize:3}],CURRENCY_SYM:"$"},DATETIME_FORMATS:{MONTH:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),SHORTMONTH:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),DAY:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),SHORTDAY:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(","),AMPMS:["AM","PM"],medium:"MMM d, y h:mm:ss a","short":"M/d/yy h:mm a",fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",mediumDate:"MMM d, y",shortDate:"M/d/yy",mediumTime:"h:mm:ss a",shortTime:"h:mm a",ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"]},pluralCat:function(e){return 1===e?"one":"other"}}}}function vt(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=Y(t[n]);return t.join("/")}function gt(e,t){var n=on(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=d(n.port)||si[n.protocol]||null}function yt(e,t){var n="/"!==e.charAt(0);n&&(e="/"+e);var r=on(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=G(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function bt(e,t){return 0===t.indexOf(e)?t.substr(e.length):void 0}function wt(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function xt(e){return e.replace(/(#.+)|#$/,"$1")}function Et(e){return e.substr(0,wt(e).lastIndexOf("/")+1)}function kt(e){return e.substring(0,e.indexOf("/",e.indexOf("//")+2))}function St(e,t,r){this.$$html5=!0,r=r||"",gt(e,this),this.$$parse=function(e){var n=bt(t,e);if(!b(n))throw li("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',e,t);yt(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=K(this.$$search),n=this.$$hash?"#"+Y(this.$$hash):"";this.$$url=vt(this.$$path)+(e?"?"+e:"")+n,this.$$absUrl=t+this.$$url.substr(1)},this.$$parseLinkUrl=function(i,o){if(o&&"#"===o[0])return this.hash(o.slice(1)),!0;var a,s,l;return(a=bt(e,i))!==n?(s=a,l=(a=bt(r,a))!==n?t+(bt("/",a)||a):e+s):(a=bt(t,i))!==n?l=t+a:t==i+"/"&&(l=t),l&&this.$$parse(l),!!l}}function At(e,t,n){gt(e,this),this.$$parse=function(r){function i(e,t,n){var r,i=/^\/[A-Z]:(\/.*)/;return 0===t.indexOf(n)&&(t=t.replace(n,"")),i.exec(t)?e:(r=i.exec(e),r?r[1]:e)}var o,a=bt(e,r)||bt(t,r);v(a)||"#"!==a.charAt(0)?this.$$html5?o=a:(o="",v(a)&&(e=r,this.replace())):(o=bt(n,a),v(o)&&(o=a)),yt(o,this),this.$$path=i(this.$$path,o,e),this.$$compose()},this.$$compose=function(){var t=K(this.$$search),r=this.$$hash?"#"+Y(this.$$hash):"";this.$$url=vt(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(t,n){return wt(e)==wt(t)?(this.$$parse(t),!0):!1}}function Mt(e,t,n){this.$$html5=!0,At.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return e==wt(r)?o=r:(a=bt(t,r))?o=e+n+a:t===r+"/"&&(o=t),o&&this.$$parse(o),!!o},this.$$compose=function(){var t=K(this.$$search),r=this.$$hash?"#"+Y(this.$$hash):"";this.$$url=vt(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+n+this.$$url}}function Ct(e){return function(){return this[e]}}function Ot(e,t){return function(n){return v(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function Tt(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return g(t)?(e=t,this):e},this.html5Mode=function(e){return T(e)?(t.enabled=e,this):y(e)?(T(e.enabled)&&(t.enabled=e.enabled),T(e.requireBase)&&(t.requireBase=e.requireBase),T(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(e,t,n){var i=u.url(),o=u.$$state;try{r.url(e,t,n),u.$$state=r.state()}catch(a){throw u.url(i),u.$$state=o,a}}function l(e,t){n.$broadcast("$locationChangeSuccess",u.absUrl(),e,u.$$state,t)}var u,c,f,d=r.baseHref(),h=r.url();if(t.enabled){if(!d&&t.requireBase)throw li("nobase","$location in HTML5 mode requires a <base> tag to be present!");f=kt(h)+(d||"/"),c=i.history?St:Mt}else f=wt(h),c=At;var p=Et(f);u=new c(f,p,"#"+e),u.$$parseLinkUrl(h,h),u.$$state=r.state();var m=/^\s*(javascript|mailto):/i;o.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var i=nr(e.target);"a"!==I(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var s=i.prop("href"),l=i.attr("href")||i.attr("xlink:href");y(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=on(s.animVal).href),m.test(s)||!s||i.attr("target")||e.isDefaultPrevented()||u.$$parseLinkUrl(s,l)&&(e.preventDefault(),u.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),xt(u.absUrl())!=xt(h)&&r.url(u.absUrl(),!0);var $=!0;return r.onUrlChange(function(e,t){return v(bt(p,e))?void(a.location.href=e):(n.$evalAsync(function(){var r,i=u.absUrl(),o=u.$$state;u.$$parse(e),u.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,u.absUrl()===e&&(r?(u.$$parse(i),u.$$state=o,s(i,!1,o)):($=!1,l(i,o)))}),void(n.$$phase||n.$digest()))}),n.$watch(function(){var e=xt(r.url()),t=xt(u.absUrl()),o=r.state(),a=u.$$replace,c=e!==t||u.$$html5&&i.history&&o!==u.$$state;($||c)&&($=!1,n.$evalAsync(function(){var t=u.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,u.$$state,o).defaultPrevented;u.absUrl()===t&&(r?(u.$$parse(e),u.$$state=o):(c&&s(t,a,o===u.$$state?null:u.$$state),l(e,o)))})),u.$$replace=!1}),u}]}function Pt(){var e=!0,t=this;this.debugEnabled=function(t){return g(t)?(e=t,this):e},this.$get=["$window",function(n){function r(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function i(e){var t=n.console||{},i=t[e]||t.log||p,a=!1;try{a=!!i.apply}catch(s){}return a?function(){var e=[];return o(arguments,function(t){e.push(r(t))}),i.apply(t,e)}:function(e,t){i(e,null==t?"":t)}}return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function Nt(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw ci("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",t);return e}function Rt(e,t){if(e+="",!b(e))throw ci("iseccst","Cannot convert object to primitive value! Expression: {0}",t);return e}function It(e,t){if(e){if(e.constructor===e)throw ci("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e.window===e)throw ci("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw ci("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",t);if(e===Object)throw ci("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",t)}return e}function _t(e,t){if(e){if(e.constructor===e)throw ci("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e===fi||e===di||e===hi)throw ci("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",t)}}function Dt(e){return e.constant}function Vt(e,t,n,r,i){It(e,i),It(t,i);for(var o,a=n.split("."),s=0;a.length>1;s++){o=Nt(a.shift(),i);var l=0===s&&t&&t[o]||e[o];l||(l={},e[o]=l),e=It(l,i)}return o=Nt(a.shift(),i),It(e[o],i),e[o]=r,r}function Ft(e){return"constructor"==e}function jt(e,t,r,i,o,a,s){Nt(e,a),Nt(t,a),Nt(r,a),Nt(i,a),Nt(o,a);var l=function(e){return It(e,a)},u=s||Ft(e)?l:m,c=s||Ft(t)?l:m,f=s||Ft(r)?l:m,d=s||Ft(i)?l:m,h=s||Ft(o)?l:m;return function(a,s){var l=s&&s.hasOwnProperty(e)?s:a;return null==l?l:(l=u(l[e]),t?null==l?n:(l=c(l[t]),r?null==l?n:(l=f(l[r]),i?null==l?n:(l=d(l[i]),o?null==l?n:l=h(l[o]):l):l):l):l)}}function Ut(e,t){return function(n,r){return e(n,r,It,t)}}function qt(e,t,r){var i=t.expensiveChecks,a=i?bi:yi,s=a[e];if(s)return s;var l=e.split("."),u=l.length;if(t.csp)s=6>u?jt(l[0],l[1],l[2],l[3],l[4],r,i):function(e,t){var o,a=0;do o=jt(l[a++],l[a++],l[a++],l[a++],l[a++],r,i)(e,t),t=n,e=o;while(u>a);return o};else{var c="";i&&(c+="s = eso(s, fe);\nl = eso(l, fe);\n");var f=i;o(l,function(e,t){Nt(e,r);var n=(t?"s":'((l&&l.hasOwnProperty("'+e+'"))?l:s)')+"."+e;(i||Ft(e))&&(n="eso("+n+", fe)",f=!0),c+="if(s == null) return undefined;\ns="+n+";\n"}),c+="return s;";var d=new Function("s","l","eso","fe",c);d.toString=$(c),f&&(d=Ut(d,r)),s=d}return s.sharedGetter=!0,s.assign=function(t,n,r){return Vt(t,r,e,n,e)},a[e]=s,s}function Lt(e){return E(e.valueOf)?e.valueOf():wi.call(e)}function Ht(){var e=ue(),t=ue();this.$get=["$filter","$sniffer",function(n,r){function i(e){var t=e;return e.sharedGetter&&(t=function(t,n){return e(t,n)},t.literal=e.literal,t.constant=e.constant,t.assign=e.assign),t}function a(e,t){for(var n=0,r=e.length;r>n;n++){var i=e[n];i.constant||(i.inputs?a(i.inputs,t):-1===t.indexOf(i)&&t.push(i))}return t}function s(e,t){return null==e||null==t?e===t:"object"==typeof e&&(e=Lt(e),"object"==typeof e)?!1:e===t||e!==e&&t!==t}function l(e,t,n,r){var i,o=r.$$inputs||(r.$$inputs=a(r.inputs,[]));if(1===o.length){var l=s;return o=o[0],e.$watch(function(e){var t=o(e);return s(t,l)||(i=r(e),l=t&&Lt(t)),i},t,n)}for(var u=[],c=0,f=o.length;f>c;c++)u[c]=s;return e.$watch(function(e){for(var t=!1,n=0,a=o.length;a>n;n++){var l=o[n](e);(t||(t=!s(l,u[n])))&&(u[n]=l&&Lt(l))}return t&&(i=r(e)),i},t,n)}function u(e,t,n,r){var i,o;return i=e.$watch(function(e){return r(e)},function(e,n,r){o=e,E(t)&&t.apply(this,arguments),g(e)&&r.$$postDigest(function(){g(o)&&i()})},n)}function c(e,t,n,r){function i(e){var t=!0;return o(e,function(e){g(e)||(t=!1)}),t}var a,s;return a=e.$watch(function(e){return r(e)},function(e,n,r){s=e,E(t)&&t.call(this,e,n,r),i(e)&&r.$$postDigest(function(){i(s)&&a()})},n)}function f(e,t,n,r){var i;return i=e.$watch(function(e){return r(e)},function(e,n,r){E(t)&&t.apply(this,arguments),i()},n)}function d(e,t){if(!t)return e;var n=e.$$watchDelegate,r=n!==c&&n!==u,i=r?function(n,r){var i=e(n,r);return t(i,n,r)}:function(n,r){var i=e(n,r),o=t(i,n,r);return g(i)?o:i};return e.$$watchDelegate&&e.$$watchDelegate!==l?i.$$watchDelegate=e.$$watchDelegate:t.$stateful||(i.$$watchDelegate=l,i.inputs=[e]),i}var h={csp:r.csp,expensiveChecks:!1},m={csp:r.csp,expensiveChecks:!0};return function(r,o,a){var s,$,v;switch(typeof r){case"string":v=r=r.trim();var g=a?t:e;if(s=g[v],!s){":"===r.charAt(0)&&":"===r.charAt(1)&&($=!0,r=r.substring(2));var y=a?m:h,b=new vi(y),w=new gi(b,n,y);s=w.parse(r),s.constant?s.$$watchDelegate=f:$?(s=i(s),s.$$watchDelegate=s.literal?c:u):s.inputs&&(s.$$watchDelegate=l),g[v]=s}return d(s,o);case"function":return d(r,o);default:return d(p,o)}}}]}function Bt(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return Wt(function(t){e.$evalAsync(t)},t)}]}function zt(){this.$get=["$browser","$exceptionHandler",function(e,t){return Wt(function(t){e.defer(t)},t)}]}function Wt(e,t){function i(e,t,n){function r(t){return function(n){i||(i=!0,t.call(e,n))}}var i=!1;return[r(t),r(n)]}function a(){this.$$state={status:0}}function s(e,t){return function(n){t.call(e,n)}}function l(e){var r,i,o;o=e.pending,e.processScheduled=!1,e.pending=n;for(var a=0,s=o.length;s>a;++a){i=o[a][0],r=o[a][e.status];try{E(r)?i.resolve(r(e.value)):1===e.status?i.resolve(e.value):i.reject(e.value)}catch(l){i.reject(l),t(l)}}}function u(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){l(t)}))}function c(){this.promise=new a,this.resolve=s(this,this.resolve),this.reject=s(this,this.reject),this.notify=s(this,this.notify)}function f(e){var t=new c,n=0,r=hr(e)?[]:{};return o(e,function(e,i){n++,v(e).then(function(e){r.hasOwnProperty(i)||(r[i]=e,--n||t.resolve(r))},function(e){r.hasOwnProperty(i)||t.reject(e)})}),0===n&&t.resolve(r),t.promise}var d=r("$q",TypeError),h=function(){return new c};a.prototype={then:function(e,t,n){var r=new c;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),this.$$state.status>0&&u(this.$$state),r.promise},"catch":function(e){return this.then(null,e)},"finally":function(e,t){return this.then(function(t){return $(t,!0,e)},function(t){return $(t,!1,e)},t)}},c.prototype={resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(d("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):this.$$resolve(e))},$$resolve:function(e){var n,r;r=i(this,this.$$resolve,this.$$reject);try{(y(e)||E(e))&&(n=e&&e.then),E(n)?(this.promise.$$state.status=-1,n.call(e,r[0],r[1],this.notify)):(this.promise.$$state.value=e,this.promise.$$state.status=1,u(this.promise.$$state))}catch(o){r[1](o),t(o)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,u(this.promise.$$state)},notify:function(n){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&e(function(){for(var e,i,o=0,a=r.length;a>o;o++){i=r[o][0],e=r[o][3];try{i.notify(E(e)?e(n):n)}catch(s){t(s)}}})}};var p=function(e){var t=new c;return t.reject(e),t.promise},m=function(e,t){var n=new c;return t?n.resolve(e):n.reject(e),n.promise},$=function(e,t,n){var r=null;try{E(n)&&(r=n())}catch(i){return m(i,!1)}return P(r)?r.then(function(){return m(e,t)},function(e){return m(e,!1)}):m(e,t)},v=function(e,t,n,r){var i=new c;return i.resolve(e),i.promise.then(t,n,r)},g=function b(e){function t(e){r.resolve(e)}function n(e){r.reject(e)}if(!E(e))throw d("norslvr","Expected resolverFn, got '{0}'",e);if(!(this instanceof b))return new b(e);var r=new c;return e(t,n),r.promise};return g.defer=h,g.reject=p,g.when=v,g.all=f,g}function Gt(){this.$get=["$window","$timeout",function(e,t){function n(){for(var e=0;e<c.length;e++){var t=c[e];t&&(c[e]=null,t())}u=c.length=0}function r(e){var t=c.length;return u++,c.push(e),0===t&&(l=s(n)),function(){t>=0&&(c[t]=null,t=null,0===--u&&l&&(l(),l=null,c.length=0))}}var i=e.requestAnimationFrame||e.webkitRequestAnimationFrame,o=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,a=!!i,s=a?function(e){var t=i(e);return function(){o(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};r.supported=a;var l,u=0,c=[];return r}]}function Kt(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$id=u(),this.$$ChildScope=null}return t.prototype=e,t}var t=10,n=r("$rootScope"),a=null,s=null;this.digestTtl=function(e){return arguments.length&&(t=e),t},this.$get=["$injector","$exceptionHandler","$parse","$browser",function(r,l,c,f){function d(e){e.currentScope.$$destroyed=!0}function h(){this.$id=u(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$isolateBindings=null}function m(e){if(k.$$phase)throw n("inprog","{0} already in progress",k.$$phase);k.$$phase=e}function $(){k.$$phase=null}function g(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function b(){}function w(){for(;M.length;)try{M.shift()()}catch(e){l(e)}s=null}function x(){null===s&&(s=f.defer(function(){k.$apply(w)}))}h.prototype={constructor:h,$new:function(t,n){var r;return n=n||this,t?(r=new h,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!=this)&&r.$on("$destroy",d),r},$watch:function(e,t,n){var r=c(e);if(r.$$watchDelegate)return r.$$watchDelegate(this,t,n,r);var i=this,o=i.$$watchers,s={fn:t,last:b,get:r,exp:e,eq:!!n};return a=null,E(t)||(s.fn=p),o||(o=i.$$watchers=[]),o.unshift(s),function(){_(o,s),a=null}},$watchGroup:function(e,t){function n(){l=!1,u?(u=!1,t(i,i,s)):t(i,r,s)}var r=new Array(e.length),i=new Array(e.length),a=[],s=this,l=!1,u=!0;if(!e.length){var c=!0;return s.$evalAsync(function(){c&&t(i,i,s)}),function(){c=!1}}return 1===e.length?this.$watch(e[0],function(e,n,o){i[0]=e,r[0]=n,t(i,e===n?i:r,o)}):(o(e,function(e,t){var o=s.$watch(e,function(e,o){i[t]=e,r[t]=o,l||(l=!0,s.$evalAsync(n))});a.push(o)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function n(e){o=e;var t,n,r,s,l;if(!v(o)){if(y(o))if(i(o)){a!==h&&(a=h,$=a.length=0,f++),t=o.length,$!==t&&(f++,a.length=$=t);for(var u=0;t>u;u++)l=a[u],s=o[u],r=l!==l&&s!==s,r||l===s||(f++,a[u]=s)}else{a!==p&&(a=p={},$=0,f++),t=0;for(n in o)o.hasOwnProperty(n)&&(t++,s=o[n],l=a[n],n in a?(r=l!==l&&s!==s,r||l===s||(f++,a[n]=s)):($++,a[n]=s,f++));if($>t){f++;for(n in a)o.hasOwnProperty(n)||($--,delete a[n])}}else a!==o&&(a=o,f++);return f;
}}function r(){if(m?(m=!1,t(o,o,l)):t(o,s,l),u)if(y(o))if(i(o)){s=new Array(o.length);for(var e=0;e<o.length;e++)s[e]=o[e]}else{s={};for(var n in o)Xn.call(o,n)&&(s[n]=o[n])}else s=o}n.$stateful=!0;var o,a,s,l=this,u=t.length>1,f=0,d=c(e,n),h=[],p={},m=!0,$=0;return this.$watch(d,r)},$digest:function(){var e,r,i,o,u,c,d,h,p,v,g=t,y=this,x=[];m("$digest"),f.$$checkUrlChange(),this===k&&null!==s&&(f.defer.cancel(s),w()),a=null;do{for(c=!1,h=y;S.length;){try{v=S.shift(),v.scope.$eval(v.expression,v.locals)}catch(M){l(M)}a=null}e:do{if(o=h.$$watchers)for(u=o.length;u--;)try{if(e=o[u])if((r=e.get(h))===(i=e.last)||(e.eq?F(r,i):"number"==typeof r&&"number"==typeof i&&isNaN(r)&&isNaN(i))){if(e===a){c=!1;break e}}else c=!0,a=e,e.last=e.eq?D(r,null):r,e.fn(r,i===b?r:i,h),5>g&&(p=4-g,x[p]||(x[p]=[]),x[p].push({msg:E(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:r,oldVal:i}))}catch(M){l(M)}if(!(d=h.$$childHead||h!==y&&h.$$nextSibling))for(;h!==y&&!(d=h.$$nextSibling);)h=h.$parent}while(h=d);if((c||S.length)&&!g--)throw $(),n("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",t,x)}while(c||S.length);for($();A.length;)try{A.shift()()}catch(M){l(M)}},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;if(this.$broadcast("$destroy"),this.$$destroyed=!0,this!==k){for(var t in this.$$listenerCount)g(this,this.$$listenerCount[t],t);e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=p,this.$on=this.$watch=this.$watchGroup=function(){return p},this.$$listeners={},this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=this.$root=this.$$watchers=null}}},$eval:function(e,t){return c(e)(this,t)},$evalAsync:function(e,t){k.$$phase||S.length||f.defer(function(){S.length&&k.$digest()}),S.push({scope:this,expression:e,locals:t})},$$postDigest:function(e){A.push(e)},$apply:function(e){try{return m("$apply"),this.$eval(e)}catch(t){l(t)}finally{$();try{k.$digest()}catch(t){throw l(t),t}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&M.push(t),x()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,g(i,1,e))}},$emit:function(e,t){var n,r,i,o=[],a=this,s=!1,u={name:e,targetScope:a,stopPropagation:function(){s=!0},preventDefault:function(){u.defaultPrevented=!0},defaultPrevented:!1},c=j([u],arguments,1);do{for(n=a.$$listeners[e]||o,u.currentScope=a,r=0,i=n.length;i>r;r++)if(n[r])try{n[r].apply(null,c)}catch(f){l(f)}else n.splice(r,1),r--,i--;if(s)return u.currentScope=null,u;a=a.$parent}while(a);return u.currentScope=null,u},$broadcast:function(e,t){var n=this,r=n,i=n,o={name:e,targetScope:n,preventDefault:function(){o.defaultPrevented=!0},defaultPrevented:!1};if(!n.$$listenerCount[e])return o;for(var a,s,u,c=j([o],arguments,1);r=i;){for(o.currentScope=r,a=r.$$listeners[e]||[],s=0,u=a.length;u>s;s++)if(a[s])try{a[s].apply(null,c)}catch(f){l(f)}else a.splice(s,1),s--,u--;if(!(i=r.$$listenerCount[e]&&r.$$childHead||r!==n&&r.$$nextSibling))for(;r!==n&&!(i=r.$$nextSibling);)r=r.$parent}return o.currentScope=null,o}};var k=new h,S=k.$$asyncQueue=[],A=k.$$postDigestQueue=[],M=k.$$applyAsyncQueue=[];return k}]}function Yt(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return g(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return g(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i,o=r?t:e;return i=on(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function Jt(e){if("self"===e)return e;if(b(e)){if(e.indexOf("***")>-1)throw xi("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=mr(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(k(e))return new RegExp("^"+e.source+"$");throw xi("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function Xt(e){var t=[];return g(e)&&o(e,function(e){t.push(Jt(e))}),t}function Zt(){this.SCE_CONTEXTS=Ei;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=Xt(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=Xt(e)),t},this.$get=["$injector",function(r){function i(e,t){return"self"===e?an(t):!!e.exec(t.href)}function o(n){var r,o,a=on(n.toString()),s=!1;for(r=0,o=e.length;o>r;r++)if(i(e[r],a)){s=!0;break}if(s)for(r=0,o=t.length;o>r;r++)if(i(t[r],a)){s=!1;break}return s}function a(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}function s(e,t){var r=d.hasOwnProperty(e)?d[e]:null;if(!r)throw xi("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||t===n||""===t)return t;if("string"!=typeof t)throw xi("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new r(t)}function l(e){return e instanceof f?e.$$unwrapTrustedValue():e}function u(e,t){if(null===t||t===n||""===t)return t;var r=d.hasOwnProperty(e)?d[e]:null;if(r&&t instanceof r)return t.$$unwrapTrustedValue();if(e===Ei.RESOURCE_URL){if(o(t))return t;throw xi("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===Ei.HTML)return c(t);throw xi("unsafe","Attempting to use an unsafe value in a safe context.")}var c=function(e){throw xi("unsafe","Attempting to use an unsafe value in a safe context.")};r.has("$sanitize")&&(c=r.get("$sanitize"));var f=a(),d={};return d[Ei.HTML]=a(f),d[Ei.CSS]=a(f),d[Ei.URL]=a(f),d[Ei.JS]=a(f),d[Ei.RESOURCE_URL]=a(d[Ei.URL]),{trustAs:s,getTrusted:u,valueOf:l}}]}function Qt(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&8>tr)throw xi("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=V(Ei);r.isEnabled=function(){return e},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,e||(r.trustAs=r.getTrusted=function(e,t){return t},r.valueOf=m),r.parseAs=function(e,n){var i=t(n);return i.literal&&i.constant?i:t(n,function(t){return r.getTrusted(e,t)})};var i=r.parseAs,a=r.getTrusted,s=r.trustAs;return o(Ei,function(e,t){var n=Jn(t);r[me("parse_as_"+n)]=function(t){return i(e,t)},r[me("get_trusted_"+n)]=function(t){return a(e,t)},r[me("trust_as_"+n)]=function(t){return s(e,t)}}),r}]}function en(){this.$get=["$window","$document",function(e,t){var n,r,i={},o=d((/android (\d+)/.exec(Jn((e.navigator||{}).userAgent))||[])[1]),a=/Boxee/i.test((e.navigator||{}).userAgent),s=t[0]||{},l=/^(Moz|webkit|ms)(?=[A-Z])/,u=s.body&&s.body.style,c=!1,f=!1;if(u){for(var h in u)if(r=l.exec(h)){n=r[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in u&&"webkit"),c=!!("transition"in u||n+"Transition"in u),f=!!("animation"in u||n+"Animation"in u),!o||c&&f||(c=b(s.body.style.webkitTransition),f=b(s.body.style.webkitAnimation))}return{history:!(!e.history||!e.history.pushState||4>o||a),hasEvent:function(e){if("input"===e&&11>=tr)return!1;if(v(i[e])){var t=s.createElement("div");i[e]="on"+e in t}return i[e]},csp:$r(),vendorPrefix:n,transitions:c,animations:f,android:o}}]}function tn(){this.$get=["$templateCache","$http","$q","$sce",function(e,t,n,r){function i(o,a){function s(e){if(!a)throw Xr("tpload","Failed to load template: {0}",o);return n.reject(e)}i.totalPendingRequests++,b(o)&&e.get(o)||(o=r.getTrustedResourceUrl(o));var l=t.defaults&&t.defaults.transformResponse;hr(l)?l=l.filter(function(e){return e!==it}):l===it&&(l=null);var u={cache:e,transformResponse:l};return t.get(o,u)["finally"](function(){i.totalPendingRequests--}).then(function(e){return e.data},s)}return i.totalPendingRequests=0,i}]}function nn(){this.$get=["$rootScope","$browser","$location",function(e,t,n){var r={};return r.findBindings=function(e,t,n){var r=e.getElementsByClassName("ng-binding"),i=[];return o(r,function(e){var r=cr.element(e).data("$binding");r&&o(r,function(r){if(n){var o=new RegExp("(^|\\s)"+mr(t)+"(\\s|\\||$)");o.test(r)&&i.push(e)}else-1!=r.indexOf(t)&&i.push(e)})}),i},r.findModels=function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+t+'"]',s=e.querySelectorAll(a);if(s.length)return s}},r.getLocation=function(){return n.url()},r.setLocation=function(t){t!==n.url()&&(n.url(t),e.$digest())},r.whenStable=function(e){t.notifyWhenNoOutstandingRequests(e)},r}]}function rn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,s,l){var u,c=g(l)&&!l,f=(c?r:n).defer(),d=f.promise;return u=t.defer(function(){try{f.resolve(o())}catch(t){f.reject(t),i(t)}finally{delete a[d.$$timeoutId]}c||e.$apply()},s),d.$$timeoutId=u,a[u]=f,d}var a={};return o.cancel=function(e){return e&&e.$$timeoutId in a?(a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId)):!1},o}]}function on(e){var t=e;return tr&&(ki.setAttribute("href",t),t=ki.href),ki.setAttribute("href",t),{href:ki.href,protocol:ki.protocol?ki.protocol.replace(/:$/,""):"",host:ki.host,search:ki.search?ki.search.replace(/^\?/,""):"",hash:ki.hash?ki.hash.replace(/^#/,""):"",hostname:ki.hostname,port:ki.port,pathname:"/"===ki.pathname.charAt(0)?ki.pathname:"/"+ki.pathname}}function an(e){var t=b(e)?on(e):e;return t.protocol===Si.protocol&&t.host===Si.host}function sn(){this.$get=$(e)}function ln(e){function t(r,i){if(y(r)){var a={};return o(r,function(e,n){a[n]=t(n,e)}),a}return e.factory(r+n,i)}var n="Filter";this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+n)}}],t("currency",dn),t("date",Sn),t("filter",un),t("json",An),t("limitTo",Mn),t("lowercase",Ti),t("number",hn),t("orderBy",Cn),t("uppercase",Pi)}function un(){return function(e,t,n){if(!hr(e))return e;var r,i,o=null!==t?typeof t:"null";switch(o){case"function":r=t;break;case"boolean":case"null":case"number":case"string":i=!0;case"object":r=cn(t,n,i);break;default:return e}return e.filter(r)}}function cn(e,t,n){var r,i=y(e)&&"$"in e;return t===!0?t=F:E(t)||(t=function(e,t){return v(e)?!1:null===e||null===t?e===t:y(e)||y(t)?!1:(e=Jn(""+e),t=Jn(""+t),-1!==e.indexOf(t))}),r=function(r){return i&&!y(r)?fn(r,e.$,t,!1):fn(r,e,t,n)}}function fn(e,t,n,r,i){var o=null!==e?typeof e:"null",a=null!==t?typeof t:"null";if("string"===a&&"!"===t.charAt(0))return!fn(e,t.substring(1),n,r);if(hr(e))return e.some(function(e){return fn(e,t,n,r)});switch(o){case"object":var s;if(r){for(s in e)if("$"!==s.charAt(0)&&fn(e[s],t,n,!0))return!0;return i?!1:fn(e,t,n,!1)}if("object"===a){for(s in t){var l=t[s];if(!E(l)&&!v(l)){var u="$"===s,c=u?e:e[s];if(!fn(c,l,n,u,u))return!1}}return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function dn(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return v(n)&&(n=t.CURRENCY_SYM),v(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:pn(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function hn(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:pn(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function pn(e,t,n,r,i){if(!isFinite(e)||y(e))return"";var o=0>e;e=Math.abs(e);var a=e+"",s="",l=[],u=!1;if(-1!==a.indexOf("e")){var c=a.match(/([\d\.]+)e(-?)(\d+)/);c&&"-"==c[2]&&c[3]>i+1?e=0:(s=a,u=!0)}if(u)i>0&&1>e&&(s=e.toFixed(i),e=parseFloat(s));else{var f=(a.split(Ai)[1]||"").length;v(i)&&(i=Math.min(Math.max(t.minFrac,f),t.maxFrac)),e=+(Math.round(+(e.toString()+"e"+i)).toString()+"e"+-i);var d=(""+e).split(Ai),h=d[0];d=d[1]||"";var p,m=0,$=t.lgSize,g=t.gSize;if(h.length>=$+g)for(m=h.length-$,p=0;m>p;p++)(m-p)%g===0&&0!==p&&(s+=n),s+=h.charAt(p);for(p=m;p<h.length;p++)(h.length-p)%$===0&&0!==p&&(s+=n),s+=h.charAt(p);for(;d.length<i;)d+="0";i&&"0"!==i&&(s+=r+d.substr(0,i))}return 0===e&&(o=!1),l.push(o?t.negPre:t.posPre,s,o?t.negSuf:t.posSuf),l.join("")}function mn(e,t,n){var r="";for(0>e&&(r="-",e=-e),e=""+e;e.length<t;)e="0"+e;return n&&(e=e.substr(e.length-t)),r+e}function $n(e,t,n,r){return n=n||0,function(i){var o=i["get"+e]();return(n>0||o>-n)&&(o+=n),0===o&&-12==n&&(o=12),mn(o,t,r)}}function vn(e,t){return function(n,r){var i=n["get"+e](),o=Zn(t?"SHORT"+e:e);return r[o][i]}}function gn(e){var t=-1*e.getTimezoneOffset(),n=t>=0?"+":"";return n+=mn(Math[t>0?"floor":"ceil"](t/60),2)+mn(Math.abs(t%60),2)}function yn(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function bn(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))}function wn(e){return function(t){var n=yn(t.getFullYear()),r=bn(t),i=+r-+n,o=1+Math.round(i/6048e5);return mn(o,e)}}function xn(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]}function En(e,t){return e.getFullYear()<=0?t.ERAS[0]:t.ERAS[1]}function kn(e,t){return e.getFullYear()<=0?t.ERANAMES[0]:t.ERANAMES[1]}function Sn(e){function t(e){var t;if(t=e.match(n)){var r=new Date(0),i=0,o=0,a=t[8]?r.setUTCFullYear:r.setFullYear,s=t[8]?r.setUTCHours:r.setHours;t[9]&&(i=d(t[9]+t[10]),o=d(t[9]+t[11])),a.call(r,d(t[1]),d(t[2])-1,d(t[3]));var l=d(t[4]||0)-i,u=d(t[5]||0)-o,c=d(t[6]||0),f=Math.round(1e3*parseFloat("0."+(t[7]||0)));return s.call(r,l,u,c,f),r}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,s,l="",u=[];if(r=r||"mediumDate",r=e.DATETIME_FORMATS[r]||r,b(n)&&(n=Oi.test(n)?d(n):t(n)),w(n)&&(n=new Date(n)),!x(n))return n;for(;r;)s=Ci.exec(r),s?(u=j(u,s,1),r=u.pop()):(u.push(r),r=null);return i&&"UTC"===i&&(n=new Date(n.getTime()),n.setMinutes(n.getMinutes()+n.getTimezoneOffset())),o(u,function(t){a=Mi[t],l+=a?a(n,e.DATETIME_FORMATS):t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),l}}function An(){return function(e,t){return v(t)&&(t=2),H(e,t)}}function Mn(){return function(e,t){return w(e)&&(e=e.toString()),hr(e)||b(e)?(t=Math.abs(Number(t))===1/0?Number(t):d(t),t?t>0?e.slice(0,t):e.slice(t):b(e)?"":[]):e}}function Cn(e){return function(t,n,r){function o(e,t){for(var r=0;r<n.length;r++){var i=n[r](e,t);if(0!==i)return i}return 0}function a(e,t){return t?function(t,n){return e(n,t)}:e}function s(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function l(e){return null===e?"null":"function"==typeof e.valueOf&&(e=e.valueOf(),s(e))?e:"function"==typeof e.toString&&(e=e.toString(),s(e))?e:""}function u(e,t){var n=typeof e,r=typeof t;return n===r&&"object"===n&&(e=l(e),t=l(t)),n===r?("string"===n&&(e=e.toLowerCase(),t=t.toLowerCase()),e===t?0:t>e?-1:1):r>n?-1:1}return i(t)?(n=hr(n)?n:[n],0===n.length&&(n=["+"]),n=n.map(function(t){var n=!1,r=t||m;if(b(t)){if("+"!=t.charAt(0)&&"-"!=t.charAt(0)||(n="-"==t.charAt(0),t=t.substring(1)),""===t)return a(u,n);if(r=e(t),r.constant){var i=r();return a(function(e,t){return u(e[i],t[i])},n)}}return a(function(e,t){return u(r(e),r(t))},n)}),or.call(t).sort(a(o,r))):t}}function On(e){return E(e)&&(e={link:e}),e.restrict=e.restrict||"AC",$(e)}function Tn(e,t){e.$name=t}function Pn(e,t,r,i,a){var s=this,l=[],u=s.$$parentForm=e.parent().controller("form")||Ii;s.$error={},s.$$success={},s.$pending=n,s.$name=a(t.name||t.ngForm||"")(r),s.$dirty=!1,s.$pristine=!0,s.$valid=!0,s.$invalid=!1,s.$submitted=!1,u.$addControl(s),s.$rollbackViewValue=function(){o(l,function(e){e.$rollbackViewValue()})},s.$commitViewValue=function(){o(l,function(e){e.$commitViewValue()})},s.$addControl=function(e){ae(e.$name,"input"),l.push(e),e.$name&&(s[e.$name]=e)},s.$$renameControl=function(e,t){var n=e.$name;s[n]===e&&delete s[n],s[t]=e,e.$name=t},s.$removeControl=function(e){e.$name&&s[e.$name]===e&&delete s[e.$name],o(s.$pending,function(t,n){s.$setValidity(n,null,e)}),o(s.$error,function(t,n){s.$setValidity(n,null,e)}),o(s.$$success,function(t,n){s.$setValidity(n,null,e)}),_(l,e)},Wn({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];if(r){var i=r.indexOf(n);-1===i&&r.push(n)}else e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(_(r,n),0===r.length&&delete e[t])},parentForm:u,$animate:i}),s.$setDirty=function(){i.removeClass(e,vo),i.addClass(e,go),s.$dirty=!0,s.$pristine=!1,u.$setDirty()},s.$setPristine=function(){i.setClass(e,vo,go+" "+_i),s.$dirty=!1,s.$pristine=!0,s.$submitted=!1,o(l,function(e){e.$setPristine()})},s.$setUntouched=function(){o(l,function(e){e.$setUntouched()})},s.$setSubmitted=function(){i.addClass(e,_i),s.$submitted=!0,u.$setSubmitted()}}function Nn(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function Rn(e,t,n,r,i,o){In(e,t,n,r,i,o),Nn(r)}function In(e,t,n,r,i,o){var a=Jn(t[0].type);if(!i.android){var s=!1;t.on("compositionstart",function(e){s=!0}),t.on("compositionend",function(){s=!1,l()})}var l=function(e){if(u&&(o.defer.cancel(u),u=null),!s){var i=t.val(),l=e&&e.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=pr(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,l)}};if(i.hasEvent("input"))t.on("input",l);else{var u,c=function(e,t,n){u||(u=o.defer(function(){u=null,t&&t.value===n||l(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||t>15&&19>t||t>=37&&40>=t||c(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut",c)}t.on("change",l),r.$render=function(){t.val(r.$isEmpty(r.$viewValue)?"":r.$viewValue)}}function _n(e,t){if(x(e))return e;if(b(e)){zi.lastIndex=0;var n=zi.exec(e);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,l=0,u=yn(r),c=7*(i-1);return t&&(o=t.getHours(),a=t.getMinutes(),s=t.getSeconds(),l=t.getMilliseconds()),new Date(r,0,u.getDate()+c,o,a,s,l)}}return NaN}function Dn(e,t){return function(n,r){var i,a;if(x(n))return n;if(b(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),ji.test(n))return new Date(n);if(e.lastIndex=0,i=e.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function Vn(e,t,r,i){return function(o,a,s,l,u,c,f){function d(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function h(e){return g(e)?x(e)?e:r(e):n}Fn(o,a,s,l),In(o,a,s,l,u,c);var p,m=l&&l.$options&&l.$options.timezone;if(l.$$parserName=e,l.$parsers.push(function(e){if(l.$isEmpty(e))return null;if(t.test(e)){var i=r(e,p);return"UTC"===m&&i.setMinutes(i.getMinutes()-i.getTimezoneOffset()),i}return n}),l.$formatters.push(function(e){if(e&&!x(e))throw xo("datefmt","Expected `{0}` to be a date",e);if(d(e)){if(p=e,p&&"UTC"===m){var t=6e4*p.getTimezoneOffset();p=new Date(p.getTime()+t)}return f("date")(e,i,m)}return p=null,""}),g(s.min)||s.ngMin){var $;l.$validators.min=function(e){return!d(e)||v($)||r(e)>=$},s.$observe("min",function(e){$=h(e),l.$validate()})}if(g(s.max)||s.ngMax){var y;l.$validators.max=function(e){return!d(e)||v(y)||r(e)<=y},s.$observe("max",function(e){y=h(e),l.$validate()})}}}function Fn(e,t,r,i){var o=t[0],a=i.$$hasNativeValidators=y(o.validity);a&&i.$parsers.push(function(e){var r=t.prop(Yn)||{};return r.badInput&&!r.typeMismatch?n:e})}function jn(e,t,r,i,o,a){if(Fn(e,t,r,i),In(e,t,r,i,o,a),i.$$parserName="number",i.$parsers.push(function(e){return i.$isEmpty(e)?null:Li.test(e)?parseFloat(e):n}),i.$formatters.push(function(e){if(!i.$isEmpty(e)){if(!w(e))throw xo("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e}),g(r.min)||r.ngMin){var s;i.$validators.min=function(e){return i.$isEmpty(e)||v(s)||e>=s},r.$observe("min",function(e){g(e)&&!w(e)&&(e=parseFloat(e,10)),s=w(e)&&!isNaN(e)?e:n,i.$validate()})}if(g(r.max)||r.ngMax){var l;i.$validators.max=function(e){return i.$isEmpty(e)||v(l)||l>=e},r.$observe("max",function(e){g(e)&&!w(e)&&(e=parseFloat(e,10)),l=w(e)&&!isNaN(e)?e:n,i.$validate()})}}function Un(e,t,n,r,i,o){In(e,t,n,r,i,o),Nn(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||Ui.test(n)}}function qn(e,t,n,r,i,o){In(e,t,n,r,i,o),Nn(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||qi.test(n)}}function Ln(e,t,n,r){v(n.name)&&t.attr("name",u());var i=function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)};t.on("click",i),r.$render=function(){var e=n.value;t[0].checked=e==r.$viewValue},n.$observe("value",r.$render)}function Hn(e,t,n,r,i){var o;if(g(r)){if(o=e(r),!o.constant)throw xo("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(t)}return i}function Bn(e,t,n,r,i,o,a,s){var l=Hn(s,e,"ngTrueValue",n.ngTrueValue,!0),u=Hn(s,e,"ngFalseValue",n.ngFalseValue,!1),c=function(e){r.$setViewValue(t[0].checked,e&&e.type)};t.on("click",c),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return e===!1},r.$formatters.push(function(e){return F(e,l)}),r.$parsers.push(function(e){return e?l:u})}function zn(e,t){return e="ngClass"+e,["$animate",function(n){function r(e,t){var n=[];e:for(var r=0;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i==t[o])continue e;n.push(i)}return n}function i(e){if(hr(e))return e;if(b(e))return e.split(" ");if(y(e)){var t=[];return o(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t}return e}return{restrict:"AC",link:function(a,s,l){function u(e){var t=f(e,1);l.$addClass(t)}function c(e){var t=f(e,-1);l.$removeClass(t)}function f(e,t){var n=s.data("$classCounts")||{},r=[];return o(e,function(e){(t>0||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(t>0)&&r.push(e))}),s.data("$classCounts",n),r.join(" ")}function d(e,t){var i=r(t,e),o=r(e,t);i=f(i,1),o=f(o,-1),i&&i.length&&n.addClass(s,i),o&&o.length&&n.removeClass(s,o)}function h(e){if(t===!0||a.$index%2===t){var n=i(e||[]);if(p){if(!F(e,p)){var r=i(p);d(r,n)}}else u(n)}p=V(e)}var p;a.$watch(l[e],h,!0),l.$observe("class",function(t){h(a.$eval(l[e]))}),"ngClass"!==e&&a.$watch("$index",function(n,r){var o=1&n;if(o!==(1&r)){var s=i(a.$eval(l[e]));o===t?u(s):c(s)}})}}}]}function Wn(e){function t(e,t,l){t===n?r("$pending",e,l):i("$pending",e,l),T(t)?t?(f(s.$error,e,l),c(s.$$success,e,l)):(c(s.$error,e,l),f(s.$$success,e,l)):(f(s.$error,e,l),f(s.$$success,e,l)),s.$pending?(o(wo,!0),s.$valid=s.$invalid=n,a("",null)):(o(wo,!1),s.$valid=Gn(s.$error),s.$invalid=!s.$valid,a("",s.$valid));var u;u=s.$pending&&s.$pending[e]?n:s.$error[e]?!1:s.$$success[e]?!0:null,a(e,u),d.$setValidity(e,u,s)}function r(e,t,n){s[e]||(s[e]={}),c(s[e],t,n)}function i(e,t,r){s[e]&&f(s[e],t,r),Gn(s[e])&&(s[e]=n)}function o(e,t){t&&!u[e]?(h.addClass(l,e),u[e]=!0):!t&&u[e]&&(h.removeClass(l,e),u[e]=!1)}function a(e,t){e=e?"-"+ne(e,"-"):"",o(mo+e,t===!0),o($o+e,t===!1)}var s=e.ctrl,l=e.$element,u={},c=e.set,f=e.unset,d=e.parentForm,h=e.$animate;u[$o]=!(u[mo]=l.hasClass(mo)),s.$setValidity=t}function Gn(e){if(e)for(var t in e)return!1;return!0}var Kn=/^\/(.+)\/([a-z]*)$/,Yn="validity",Jn=function(e){return b(e)?e.toLowerCase():e},Xn=Object.prototype.hasOwnProperty,Zn=function(e){return b(e)?e.toUpperCase():e},Qn=function(e){return b(e)?e.replace(/[A-Z]/g,function(e){return String.fromCharCode(32|e.charCodeAt(0))}):e},er=function(e){return b(e)?e.replace(/[a-z]/g,function(e){return String.fromCharCode(-33&e.charCodeAt(0))}):e};"i"!=="I".toLowerCase()&&(Jn=Qn,Zn=er);var tr,nr,rr,ir,or=[].slice,ar=[].splice,sr=[].push,lr=Object.prototype.toString,ur=r("ng"),cr=e.angular||(e.angular={}),fr=0;tr=t.documentMode,p.$inject=[],m.$inject=[];var dr,hr=Array.isArray,pr=function(e){return b(e)?e.trim():e},mr=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},$r=function(){if(g($r.isActive_))return $r.isActive_;var e=!(!t.querySelector("[ng-csp]")&&!t.querySelector("[data-ng-csp]"));if(!e)try{new Function("")}catch(n){e=!0}return $r.isActive_=e},vr=["ng-","data-ng-","ng:","x-ng-"],gr=/[A-Z]/g,yr=!1,br=1,wr=2,xr=3,Er=8,kr=9,Sr=11,Ar={full:"1.3.20",major:1,minor:3,dot:20,codeName:"shallow-translucence"};be.expando="ng339";var Mr=be.cache={},Cr=1,Or=function(e,t,n){e.addEventListener(t,n,!1)},Tr=function(e,t,n){e.removeEventListener(t,n,!1)};be._data=function(e){return this.cache[e[this.expando]]||{}};var Pr=/([\:\-\_]+(.))/g,Nr=/^moz([A-Z])/,Rr={mouseleave:"mouseout",mouseenter:"mouseover"},Ir=r("jqLite"),_r=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,Dr=/<|&#?\w+;/,Vr=/<([\w:]+)/,Fr=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,jr={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};jr.optgroup=jr.option,jr.tbody=jr.tfoot=jr.colgroup=jr.caption=jr.thead,jr.th=jr.td;var Ur=be.prototype={ready:function(n){function r(){i||(i=!0,n())}var i=!1;"complete"===t.readyState?setTimeout(r):(this.on("DOMContentLoaded",r),be(e).on("load",r))},toString:function(){var e=[];return o(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return nr(e>=0?this[e]:this[this.length+e])},length:0,push:sr,sort:[].sort,splice:[].splice},qr={};o("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){qr[Jn(e)]=e});var Lr={};o("input,select,option,textarea,button,form,details".split(","),function(e){Lr[e]=!0});var Hr={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};o({data:Ae,removeData:ke},function(e,t){be[t]=e}),o({data:Ae,inheritedData:Ne,scope:function(e){return nr.data(e,"$scope")||Ne(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return nr.data(e,"$isolateScope")||nr.data(e,"$isolateScopeNoTemplate")},controller:Pe,injector:function(e){return Ne(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:Me,css:function(e,t,n){return t=me(t),g(n)?void(e.style[t]=n):e.style[t]},attr:function(e,t,r){var i=e.nodeType;if(i!==xr&&i!==wr&&i!==Er){var o=Jn(t);if(qr[o]){if(!g(r))return e[t]||(e.attributes.getNamedItem(t)||p).specified?o:n;r?(e[t]=!0,e.setAttribute(t,o)):(e[t]=!1,e.removeAttribute(o))}else if(g(r))e.setAttribute(t,r);else if(e.getAttribute){var a=e.getAttribute(t,2);return null===a?n:a}}},prop:function(e,t,n){return g(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if(v(t)){var n=e.nodeType;return n===br||n===xr?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(v(t)){if(e.multiple&&"select"===I(e)){var n=[];return o(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return v(t)?e.innerHTML:(xe(e,!0),void(e.innerHTML=t))},empty:Re},function(e,t){be.prototype[t]=function(t,r){var i,o,a=this.length;if(e!==Re&&(2==e.length&&e!==Me&&e!==Pe?t:r)===n){if(y(t)){for(i=0;a>i;i++)if(e===Ae)e(this[i],t);else for(o in t)e(this[i],o,t[o]);return this}for(var s=e.$dv,l=s===n?Math.min(a,1):a,u=0;l>u;u++){var c=e(this[u],t,r);s=s?s+c:c}return s}for(i=0;a>i;i++)e(this[i],t,r);return this}}),o({removeData:ke,on:function Yo(e,t,n,r){if(g(r))throw Ir("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(ve(e)){var i=Se(e,!0),o=i.events,a=i.handle;a||(a=i.handle=Fe(e,o));for(var s=t.indexOf(" ")>=0?t.split(" "):[t],l=s.length;l--;){t=s[l];var u=o[t];u||(o[t]=[],"mouseenter"===t||"mouseleave"===t?Yo(e,Rr[t],function(e){var n=this,r=e.relatedTarget;r&&(r===n||n.contains(r))||a(e,t)}):"$destroy"!==t&&Or(e,t,a),u=o[t]),u.push(n)}}},off:Ee,one:function(e,t,n){e=nr(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,r=e.parentNode;xe(e),o(new be(t),function(t){n?r.insertBefore(t,n.nextSibling):r.replaceChild(t,e),n=t})},children:function(e){var t=[];return o(e.childNodes,function(e){e.nodeType===br&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(n===br||n===Sr){t=new be(t);for(var r=0,i=t.length;i>r;r++){var o=t[r];e.appendChild(o)}}},prepend:function(e,t){if(e.nodeType===br){var n=e.firstChild;o(new be(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){t=nr(t).eq(0).clone()[0];var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)},remove:Ie,detach:function(e){Ie(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new be(t);for(var i=0,o=t.length;o>i;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Oe,removeClass:Ce,toggleClass:function(e,t,n){t&&o(t.split(" "),function(t){var r=n;v(r)&&(r=!Me(e,t)),(r?Oe:Ce)(e,t)})},parent:function(e){var t=e.parentNode;return t&&t.nodeType!==Sr?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:we,triggerHandler:function(e,t,n){var r,i,a,s=t.type||t,l=Se(e),u=l&&l.events,c=u&&u[s];c&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:p,type:s,target:e},t.type&&(r=f(r,t)),i=V(c),a=n?[r].concat(n):[r],o(i,function(t){r.isImmediatePropagationStopped()||t.apply(e,a)}))}},function(e,t){be.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;a>o;o++)v(i)?(i=e(this[o],t,n,r),g(i)&&(i=nr(i))):Te(i,e(this[o],t,n,r));return g(i)?i:this},be.prototype.bind=be.prototype.on,be.prototype.unbind=be.prototype.off}),qe.prototype={put:function(e,t){this[Ue(e,this.nextUid)]=t},get:function(e){return this[Ue(e,this.nextUid)]},remove:function(e){var t=this[e=Ue(e,this.nextUid)];return delete this[e],t}};var Br=/^function\s*[^\(]*\(\s*([^\)]*)\)/m,zr=/,/,Wr=/^\s*(_?)(\S+?)\1\s*$/,Gr=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Kr=r("$injector");Be.$$annotate=He;var Yr=r("$animate"),Jr=["$provide",function(e){this.$$selectors={},this.register=function(t,n){var r=t+"-animation";if(t&&"."!=t.charAt(0))throw Yr("notcsel","Expecting class selector starting with '.' got '{0}'.",t);this.$$selectors[t.substr(1)]=r,e.factory(r,n)},this.classNameFilter=function(e){return 1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null),this.$$classNameFilter},this.$get=["$$q","$$asyncCallback","$rootScope",function(e,t,n){function r(t){var r,i=e.defer();return i.promise.$$cancelFn=function(){r&&r()},n.$$postDigest(function(){r=t(function(){i.resolve()})}),i.promise}function i(e,t){var n=[],r=[],i=ue();return o((e.attr("class")||"").split(/\s+/),function(e){i[e]=!0}),o(t,function(e,t){var o=i[t];e===!1&&o?r.push(t):e!==!0||o||n.push(t)}),n.length+r.length>0&&[n.length?n:null,r.length?r:null]}function a(e,t,n){for(var r=0,i=t.length;i>r;++r){var o=t[r];e[o]=n}}function s(){return u||(u=e.defer(),t(function(){u.resolve(),u=null})),u.promise}function l(e,t){if(cr.isObject(t)){var n=f(t.from||{},t.to||{});e.css(n)}}var u;return{animate:function(e,t,n){return l(e,{from:t,to:n}),s()},enter:function(e,t,n,r){return l(e,r),n?n.after(e):t.prepend(e),s()},leave:function(e,t){return l(e,t),e.remove(),s()},move:function(e,t,n,r){return this.enter(e,t,n,r)},addClass:function(e,t,n){return this.setClass(e,t,[],n)},$$addClassImmediately:function(e,t,n){return e=nr(e),t=b(t)?t:hr(t)?t.join(" "):"",o(e,function(e){Oe(e,t)}),l(e,n),s()},removeClass:function(e,t,n){return this.setClass(e,[],t,n);
},$$removeClassImmediately:function(e,t,n){return e=nr(e),t=b(t)?t:hr(t)?t.join(" "):"",o(e,function(e){Ce(e,t)}),l(e,n),s()},setClass:function(e,t,n,o){var s=this,l="$$animateClasses",u=!1;e=nr(e);var c=e.data(l);c?o&&c.options&&(c.options=cr.extend(c.options||{},o)):(c={classes:{},options:o},u=!0);var f=c.classes;return t=hr(t)?t:t.split(" "),n=hr(n)?n:n.split(" "),a(f,t,!0),a(f,n,!1),u&&(c.promise=r(function(t){var n=e.data(l);if(e.removeData(l),n){var r=i(e,n.classes);r&&s.$$setClassImmediately(e,r[0],r[1],n.options)}t()}),e.data(l,c)),c.promise},$$setClassImmediately:function(e,t,n,r){return t&&this.$$addClassImmediately(e,t),n&&this.$$removeClassImmediately(e,n),l(e,r),s()},enabled:p,cancel:p}}]}],Xr=r("$compile");Xe.$inject=["$provide","$$sanitizeUriProvider"];var Zr=/^((?:x|data)[\:\-_])/i,Qr=r("$controller"),ei="application/json",ti={"Content-Type":ei+";charset=utf-8"},ni=/^\[|^\{(?!\{)/,ri={"[":/]$/,"{":/}$/},ii=/^\)\]\}',?\n/,oi=r("$interpolate"),ai=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,si={http:80,https:443,ftp:21},li=r("$location"),ui={$$html5:!1,$$replace:!1,absUrl:Ct("$$absUrl"),url:function(e){if(v(e))return this.$$url;var t=ai.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:Ct("$$protocol"),host:Ct("$$host"),port:Ct("$$port"),path:Ot("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(b(e)||w(e))e=e.toString(),this.$$search=G(e);else{if(!y(e))throw li("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");e=D(e,{}),o(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:v(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:Ot("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};o([Mt,At,St],function(e){e.prototype=Object.create(ui),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==St||!this.$$html5)throw li("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=v(t)?null:t,this}});var ci=r("$parse"),fi=Function.prototype.call,di=Function.prototype.apply,hi=Function.prototype.bind,pi=ue();o({"null":function(){return null},"true":function(){return!0},"false":function(){return!1},undefined:function(){}},function(e,t){e.constant=e.literal=e.sharedGetter=!0,pi[t]=e}),pi["this"]=function(e){return e},pi["this"].sharedGetter=!0;var mi=f(ue(),{"+":function(e,t,r,i){return r=r(e,t),i=i(e,t),g(r)?g(i)?r+i:r:g(i)?i:n},"-":function(e,t,n,r){return n=n(e,t),r=r(e,t),(g(n)?n:0)-(g(r)?r:0)},"*":function(e,t,n,r){return n(e,t)*r(e,t)},"/":function(e,t,n,r){return n(e,t)/r(e,t)},"%":function(e,t,n,r){return n(e,t)%r(e,t)},"===":function(e,t,n,r){return n(e,t)===r(e,t)},"!==":function(e,t,n,r){return n(e,t)!==r(e,t)},"==":function(e,t,n,r){return n(e,t)==r(e,t)},"!=":function(e,t,n,r){return n(e,t)!=r(e,t)},"<":function(e,t,n,r){return n(e,t)<r(e,t)},">":function(e,t,n,r){return n(e,t)>r(e,t)},"<=":function(e,t,n,r){return n(e,t)<=r(e,t)},">=":function(e,t,n,r){return n(e,t)>=r(e,t)},"&&":function(e,t,n,r){return n(e,t)&&r(e,t)},"||":function(e,t,n,r){return n(e,t)||r(e,t)},"!":function(e,t,n){return!n(e,t)},"=":!0,"|":!0}),$i={n:"\n",f:"\f",r:"\r",t:"	",v:"\x0B","'":"'",'"':'"'},vi=function(e){this.options=e};vi.prototype={constructor:vi,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;){var t=this.text.charAt(this.index);if('"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(t))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var n=t+this.peek(),r=n+this.peek(2),i=mi[t],o=mi[n],a=mi[r];if(i||o||a){var s=a?r:o?n:t;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){var t=e||1;return this.index+t<this.text.length?this.text.charAt(this.index+t):!1},isNumber:function(e){return e>="0"&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"	"===e||"\n"===e||"\x0B"===e||" "===e},isIdent:function(e){return e>="a"&&"z">=e||e>="A"&&"Z">=e||"_"===e||"$"===e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=g(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw ci("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Jn(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){for(var e=this.index;this.index<this.text.length;){var t=this.text.charAt(this.index);if(!this.isIdent(t)&&!this.isNumber(t))break;this.index++}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var s=$i[o];n+=s||o}i=!1}else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var gi=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n};gi.ZERO=f(function(){return 0},{sharedGetter:!0,constant:!0}),gi.prototype={constructor:gi,parse:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.statements();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t.literal=!!t.literal,t.constant=!!t.constant,t},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.peek().identifier&&this.peek().text in pi?e=pi[this.consume().text]:this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t,n;t=this.expect("(","[",".");)"("===t.text?(e=this.functionCall(e,n),n=null):"["===t.text?(n=e,e=this.objectIndex(e)):"."===t.text?(n=e,e=this.fieldAccess(e)):this.throwError("IMPOSSIBLE");return e},throwError:function(e,t){throw ci("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},peekToken:function(){if(0===this.tokens.length)throw ci("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){var o=this.tokens[e],a=o.text;if(a===t||a===n||a===r||a===i||!t&&!n&&!r&&!i)return o}return!1},expect:function(e,t,n,r){var i=this.peek(e,t,n,r);return i?(this.tokens.shift(),i):!1},consume:function(e){if(0===this.tokens.length)throw ci("ueoe","Unexpected end of expression: {0}",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},unaryFn:function(e,t){var n=mi[e];return f(function(e,r){return n(e,r,t)},{constant:t.constant,inputs:[t]})},binaryFn:function(e,t,n,r){var i=mi[t];return f(function(t,r){return i(t,r,e,n)},{constant:e.constant&&n.constant,inputs:!r&&[e,n]})},identifier:function(){for(var e=this.consume().text;this.peek(".")&&this.peekAhead(1).identifier&&!this.peekAhead(2,"(");)e+=this.consume().text+this.consume().text;return qt(e,this.options,this.text)},constant:function(){var e=this.consume().value;return f(function(){return e},{constant:!0,literal:!0})},statements:function(){for(var e=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&e.push(this.filterChain()),!this.expect(";"))return 1===e.length?e[0]:function(t,n){for(var r,i=0,o=e.length;o>i;i++)r=e[i](t,n);return r}},filterChain:function(){for(var e,t=this.expression();e=this.expect("|");)t=this.filter(t);return t},filter:function(e){var t,r,i=this.$filter(this.consume().text);if(this.peek(":"))for(t=[],r=[];this.expect(":");)t.push(this.expression());var o=[e].concat(t||[]);return f(function(o,a){var s=e(o,a);if(r){r[0]=s;for(var l=t.length;l--;)r[l+1]=t[l](o,a);return i.apply(n,r)}return i(s)},{constant:!i.$stateful&&o.every(Dt),inputs:!i.$stateful&&o})},expression:function(){return this.assignment()},assignment:function(){var e,t,n=this.ternary();return(t=this.expect("="))?(n.assign||this.throwError("implies assignment but ["+this.text.substring(0,t.index)+"] can not be assigned to",t),e=this.ternary(),f(function(t,r){return n.assign(t,e(t,r),r)},{inputs:[n,e]})):n},ternary:function(){var e,t,n=this.logicalOR();if((t=this.expect("?"))&&(e=this.assignment(),this.consume(":"))){var r=this.assignment();return f(function(t,i){return n(t,i)?e(t,i):r(t,i)},{constant:n.constant&&e.constant&&r.constant})}return n},logicalOR:function(){for(var e,t=this.logicalAND();e=this.expect("||");)t=this.binaryFn(t,e.text,this.logicalAND(),!0);return t},logicalAND:function(){for(var e,t=this.equality();e=this.expect("&&");)t=this.binaryFn(t,e.text,this.equality(),!0);return t},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t=this.binaryFn(t,e.text,this.relational());return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t=this.binaryFn(t,e.text,this.additive());return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t=this.binaryFn(t,e.text,this.multiplicative());return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t=this.binaryFn(t,e.text,this.unary());return t},unary:function(){var e;return this.expect("+")?this.primary():(e=this.expect("-"))?this.binaryFn(gi.ZERO,e.text,this.unary()):(e=this.expect("!"))?this.unaryFn(e.text,this.unary()):this.primary()},fieldAccess:function(e){var t=this.identifier();return f(function(r,i,o){var a=o||e(r,i);return null==a?n:t(a)},{assign:function(n,r,i){var o=e(n,i);return o||e.assign(n,o={},i),t.assign(o,r)}})},objectIndex:function(e){var t=this.text,r=this.expression();return this.consume("]"),f(function(i,o){var a,s=e(i,o),l=Rt(r(i,o),t);return Nt(l,t),s?a=It(s[l],t):n},{assign:function(n,i,o){var a=Nt(Rt(r(n,o),t),t),s=It(e(n,o),t);return s||e.assign(n,s={},o),s[a]=i}})},functionCall:function(e,t){var r=[];if(")"!==this.peekToken().text)do r.push(this.expression());while(this.expect(","));this.consume(")");var i=this.text,o=r.length?[]:null;return function(a,s){var l=t?t(a,s):g(t)?n:a,u=e(a,s,l)||p;if(o)for(var c=r.length;c--;)o[c]=It(r[c](a,s),i);It(l,i),_t(u,i);var f=u.apply?u.apply(l,o):u(o[0],o[1],o[2],o[3],o[4]);return o&&(o.length=0),It(f,i)}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),f(function(t,n){for(var r=[],i=0,o=e.length;o>i;i++)r.push(e[i](t,n));return r},{literal:!0,constant:e.every(Dt),inputs:e})},object:function(){var e=[],t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;var n=this.consume();n.constant?e.push(n.value):n.identifier?e.push(n.text):this.throwError("invalid key",n),this.consume(":"),t.push(this.expression())}while(this.expect(","));return this.consume("}"),f(function(n,r){for(var i={},o=0,a=t.length;a>o;o++)i[e[o]]=t[o](n,r);return i},{literal:!0,constant:t.every(Dt),inputs:t})}};var yi=ue(),bi=ue(),wi=Object.prototype.valueOf,xi=r("$sce"),Ei={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Xr=r("$compile"),ki=t.createElement("a"),Si=on(e.location.href);ln.$inject=["$provide"],dn.$inject=["$locale"],hn.$inject=["$locale"];var Ai=".",Mi={yyyy:$n("FullYear",4),yy:$n("FullYear",2,0,!0),y:$n("FullYear",1),MMMM:vn("Month"),MMM:vn("Month",!0),MM:$n("Month",2,1),M:$n("Month",1,1),dd:$n("Date",2),d:$n("Date",1),HH:$n("Hours",2),H:$n("Hours",1),hh:$n("Hours",2,-12),h:$n("Hours",1,-12),mm:$n("Minutes",2),m:$n("Minutes",1),ss:$n("Seconds",2),s:$n("Seconds",1),sss:$n("Milliseconds",3),EEEE:vn("Day"),EEE:vn("Day",!0),a:xn,Z:gn,ww:wn(2),w:wn(1),G:En,GG:En,GGG:En,GGGG:kn},Ci=/((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,Oi=/^\-?\d+$/;Sn.$inject=["$locale"];var Ti=$(Jn),Pi=$(Zn);Cn.$inject=["$parse"];var Ni=$({restrict:"E",compile:function(e,t){return t.href||t.xlinkHref||t.name?void 0:function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===lr.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),Ri={};o(qr,function(e,t){if("multiple"!=e){var n=Ze("ng-"+t);Ri[n]=function(){return{restrict:"A",priority:100,link:function(e,r,i){e.$watch(i[n],function(e){i.$set(t,!!e)})}}}}}),o(Hr,function(e,t){Ri[t]=function(){return{priority:100,link:function(e,n,r){if("ngPattern"===t&&"/"==r.ngPattern.charAt(0)){var i=r.ngPattern.match(Kn);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}e.$watch(r[t],function(e){r.$set(t,e)})}}}}),o(["src","srcset","href"],function(e){var t=Ze("ng-"+e);Ri[t]=function(){return{priority:99,link:function(n,r,i){var o=e,a=e;"href"===e&&"[object SVGAnimatedString]"===lr.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(t,function(t){return t?(i.$set(a,t),void(tr&&o&&r.prop(o,i[a]))):void("href"===e&&i.$set(a,null))})}}}});var Ii={$addControl:p,$$renameControl:Tn,$removeControl:p,$setValidity:p,$setDirty:p,$setPristine:p,$setSubmitted:p},_i="ng-submitted";Pn.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Di=function(e){return["$timeout",function(t){var r={name:"form",restrict:e?"EAC":"E",controller:Pn,compile:function(r,i){r.addClass(vo).addClass(mo);var o=i.name?"name":e&&i.ngForm?"ngForm":!1;return{pre:function(e,r,i,a){if(!("action"in i)){var s=function(t){e.$apply(function(){a.$commitViewValue(),a.$setSubmitted()}),t.preventDefault()};Or(r[0],"submit",s),r.on("$destroy",function(){t(function(){Tr(r[0],"submit",s)},0,!1)})}var l=a.$$parentForm;o&&(Vt(e,null,a.$name,a,a.$name),i.$observe(o,function(t){a.$name!==t&&(Vt(e,null,a.$name,n,a.$name),l.$$renameControl(a,t),Vt(e,null,a.$name,a,a.$name))})),r.on("$destroy",function(){l.$removeControl(a),o&&Vt(e,null,i[o],n,a.$name),f(a,Ii)})}}}};return r}]},Vi=Di(),Fi=Di(!0),ji=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,Ui=/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,qi=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Li=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/,Hi=/^(\d{4})-(\d{2})-(\d{2})$/,Bi=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,zi=/^(\d{4})-W(\d\d)$/,Wi=/^(\d{4})-(\d\d)$/,Gi=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Ki={text:Rn,date:Vn("date",Hi,Dn(Hi,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":Vn("datetimelocal",Bi,Dn(Bi,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:Vn("time",Gi,Dn(Gi,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:Vn("week",zi,_n,"yyyy-Www"),month:Vn("month",Wi,Dn(Wi,["yyyy","MM"]),"yyyy-MM"),number:jn,url:Un,email:qn,radio:Ln,checkbox:Bn,hidden:p,button:p,submit:p,reset:p,file:p},Yi=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Ki[Jn(a.type)]||Ki.text)(i,o,a,s[0],t,e,n,r)}}}}],Ji=/^(true|false|\d+)$/,Xi=function(){return{restrict:"A",priority:100,compile:function(e,t){return Ji.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},Zi=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,r,i){e.$$addBindingInfo(r,i.ngBind),r=r[0],t.$watch(i.ngBind,function(e){r.textContent=e===n?"":e})}}}}],Qi=["$interpolate","$compile",function(e,t){return{compile:function(r){return t.$$addBindingClass(r),function(r,i,o){var a=e(i.attr(o.$attr.ngBindTemplate));t.$$addBindingInfo(i,a.expressions),i=i[0],o.$observe("ngBindTemplate",function(e){i.textContent=e===n?"":e})}}}}],eo=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(e){return(e||"").toString()});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){r.html(e.getTrustedHtml(o(t))||"")})}}}}],to=$({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),no=zn("",!0),ro=zn("Odd",0),io=zn("Even",1),oo=On({compile:function(e,t){t.$set("ngCloak",n),e.removeClass("ng-cloak")}}),ao=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],so={},lo={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=Ze("ng-"+e);so[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[t],null,!0);return function(t,n){n.on(e,function(n){var i=function(){a(t,{$event:n})};lo[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var uo=["$animate",function(e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,l,u;n.$watch(i.ngIf,function(n){n?l||a(function(n,o){l=o,n[n.length++]=t.createComment(" end ngIf: "+i.ngIf+" "),s={clone:n},e.enter(n,r.parent(),r)}):(u&&(u.remove(),u=null),l&&(l.$destroy(),l=null),s&&(u=le(s.clone),e.leave(u).then(function(){u=null}),s=null))})}}}],co=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:cr.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,l,u,c){var f,d,h,p=0,m=function(){d&&(d.remove(),d=null),f&&(f.$destroy(),f=null),h&&(n.leave(h).then(function(){d=null}),d=h,h=null)};r.$watch(o,function(o){var l=function(){!g(s)||s&&!r.$eval(s)||t()},d=++p;o?(e(o,!0).then(function(e){if(d===p){var t=r.$new();u.template=e;var s=c(t,function(e){m(),n.enter(e,null,i).then(l)});f=t,h=s,f.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){d===p&&(m(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(m(),u.template=null)})}}}}],fo=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){return/SVG/.test(r[0].toString())?(r.empty(),void e(ge(o.template,t).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(o.template),void e(r.contents())(n))}}}],ho=On({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),po=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,r,i){var a=t.attr(r.$attr.ngList)||", ",s="false"!==r.ngTrim,l=s?pr(a):a,u=function(e){if(!v(e)){var t=[];return e&&o(e.split(l),function(e){e&&t.push(s?pr(e):e)}),t}};i.$parsers.push(u),i.$formatters.push(function(e){return hr(e)?e.join(a):n}),i.$isEmpty=function(e){return!e||!e.length}}}},mo="ng-valid",$o="ng-invalid",vo="ng-pristine",go="ng-dirty",yo="ng-untouched",bo="ng-touched",wo="ng-pending",xo=r("ngModel"),Eo=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,r,i,a,s,l,u,c,f){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=n,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=n,this.$name=f(r.name||"",!1)(e);var d,h=a(r.ngModel),m=h.assign,$=h,y=m,b=null,x=this;this.$$setOptions=function(e){if(x.$options=e,e&&e.getterSetter){var t=a(r.ngModel+"()"),n=a(r.ngModel+"($$$p)");$=function(e){var n=h(e);return E(n)&&(n=t(e)),n},y=function(e,t){E(h(e))?n(e,{$$$p:x.$modelValue}):m(e,x.$modelValue)}}else if(!h.assign)throw xo("nonassign","Expression '{0}' is non-assignable. Element: {1}",r.ngModel,z(i))},this.$render=p,this.$isEmpty=function(e){return v(e)||""===e||null===e||e!==e};var k=i.inheritedData("$formController")||Ii,S=0;Wn({ctrl:this,$element:i,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},parentForm:k,$animate:s}),this.$setPristine=function(){x.$dirty=!1,x.$pristine=!0,s.removeClass(i,go),s.addClass(i,vo)},this.$setDirty=function(){x.$dirty=!0,x.$pristine=!1,s.removeClass(i,vo),s.addClass(i,go),k.$setDirty()},this.$setUntouched=function(){x.$touched=!1,x.$untouched=!0,s.setClass(i,yo,bo)},this.$setTouched=function(){x.$touched=!0,x.$untouched=!1,s.setClass(i,bo,yo)},this.$rollbackViewValue=function(){l.cancel(b),x.$viewValue=x.$$lastCommittedViewValue,x.$render()},this.$validate=function(){if(!w(x.$modelValue)||!isNaN(x.$modelValue)){var e=x.$$lastCommittedViewValue,t=x.$$rawModelValue,r=x.$valid,i=x.$modelValue,o=x.$options&&x.$options.allowInvalid;x.$$runValidators(t,e,function(e){o||r===e||(x.$modelValue=e?t:n,x.$modelValue!==i&&x.$$writeModelToScope())})}},this.$$runValidators=function(e,t,r){function i(){var e=x.$$parserName||"parse";return d!==n?(d||(o(x.$validators,function(e,t){l(t,null)}),o(x.$asyncValidators,function(e,t){l(t,null)})),l(e,d),d):(l(e,null),!0)}function a(){var n=!0;return o(x.$validators,function(r,i){var o=r(e,t);n=n&&o,l(i,o)}),n?!0:(o(x.$asyncValidators,function(e,t){l(t,null)}),!1)}function s(){var r=[],i=!0;o(x.$asyncValidators,function(o,a){var s=o(e,t);if(!P(s))throw xo("$asyncValidators","Expected asynchronous validator to return a promise but got '{0}' instead.",s);l(a,n),r.push(s.then(function(){l(a,!0)},function(e){i=!1,l(a,!1)}))}),r.length?c.all(r).then(function(){u(i)},p):u(!0)}function l(e,t){f===S&&x.$setValidity(e,t)}function u(e){f===S&&r(e)}S++;var f=S;return i()&&a()?void s():void u(!1)},this.$commitViewValue=function(){var e=x.$viewValue;l.cancel(b),(x.$$lastCommittedViewValue!==e||""===e&&x.$$hasNativeValidators)&&(x.$$lastCommittedViewValue=e,x.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function t(){x.$modelValue!==a&&x.$$writeModelToScope()}var r=x.$$lastCommittedViewValue,i=r;if(d=v(i)?n:!0)for(var o=0;o<x.$parsers.length;o++)if(i=x.$parsers[o](i),v(i)){d=!1;break}w(x.$modelValue)&&isNaN(x.$modelValue)&&(x.$modelValue=$(e));var a=x.$modelValue,s=x.$options&&x.$options.allowInvalid;x.$$rawModelValue=i,s&&(x.$modelValue=i,t()),x.$$runValidators(i,x.$$lastCommittedViewValue,function(e){s||(x.$modelValue=e?i:n,t())})},this.$$writeModelToScope=function(){y(e,x.$modelValue),o(x.$viewChangeListeners,function(e){try{e()}catch(n){t(n)}})},this.$setViewValue=function(e,t){x.$viewValue=e,x.$options&&!x.$options.updateOnDefault||x.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n,r=0,i=x.$options;i&&g(i.debounce)&&(n=i.debounce,w(n)?r=n:w(n[t])?r=n[t]:w(n["default"])&&(r=n["default"])),l.cancel(b),r?b=l(function(){x.$commitViewValue()},r):u.$$phase?x.$commitViewValue():e.$apply(function(){x.$commitViewValue()})},e.$watch(function(){var t=$(e);if(t!==x.$modelValue&&(x.$modelValue===x.$modelValue||t===t)){x.$modelValue=x.$$rawModelValue=t,d=n;for(var r=x.$formatters,i=r.length,o=t;i--;)o=r[i](o);x.$viewValue!==o&&(x.$viewValue=x.$$lastCommittedViewValue=o,x.$render(),x.$$runValidators(t,o,p))}return t})}],ko=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Eo,priority:1,compile:function(t){return t.addClass(vo).addClass(yo).addClass(mo),{pre:function(e,t,n,r){var i=r[0],o=r[1]||Ii;i.$$setOptions(r[2]&&r[2].$options),o.$addControl(i),n.$observe("name",function(e){i.$name!==e&&o.$$renameControl(i,e)}),e.$on("$destroy",function(){o.$removeControl(i)})},post:function(t,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(e){o.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(n){o.$touched||(e.$$phase?t.$evalAsync(o.$setTouched):t.$apply(o.$setTouched))})}}}}}],So=/(\s+|^)default(\s+|$)/,Ao=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var r=this;this.$options=e.$eval(t.ngModelOptions),this.$options.updateOn!==n?(this.$options.updateOnDefault=!1,this.$options.updateOn=pr(this.$options.updateOn.replace(So,function(){return r.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},Mo=On({terminal:!0,priority:1e3}),Co=["$locale","$interpolate",function(e,t){var n=/{}/g,r=/^when(Minus)?(.+)$/;return{restrict:"EA",link:function(i,a,s){function l(e){a.text(e||"")}var u,c=s.count,f=s.$attr.when&&a.attr(s.$attr.when),d=s.offset||0,h=i.$eval(f)||{},p={},m=t.startSymbol(),$=t.endSymbol(),v=m+c+"-"+d+$,g=cr.noop;o(s,function(e,t){var n=r.exec(t);if(n){var i=(n[1]?"-":"")+Jn(n[2]);h[i]=a.attr(s.$attr[t])}}),o(h,function(e,r){p[r]=t(e.replace(n,v))}),i.$watch(c,function(t){var n=parseFloat(t),r=isNaN(n);r||n in h||(n=e.pluralCat(n-d)),n===u||r&&isNaN(u)||(g(),g=i.$watch(p[n],l),u=n)})}}}],Oo=["$parse","$animate",function(e,a){var s="$$NG_REMOVED",l=r("ngRepeat"),u=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))},c=function(e){return e.clone[0]},f=function(e){return e.clone[e.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,d){var h=d.ngRepeat,p=t.createComment(" end ngRepeat: "+h+" "),m=h.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!m)throw l("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",h);var $=m[1],v=m[2],g=m[3],y=m[4];if(m=$.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!m)throw l("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",$);var b=m[3]||m[1],w=m[2];if(g&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(g)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(g)))throw l("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",g);var x,E,k,S,A={$id:Ue};return y?x=e(y):(k=function(e,t){return Ue(t)},S=function(e){return e}),function(e,t,r,d,m){x&&(E=function(t,n,r){return w&&(A[w]=t),A[b]=n,A.$index=r,x(e,A)});var $=ue();e.$watchCollection(v,function(r){var d,v,y,x,A,M,C,O,T,P,N,R,I=t[0],_=ue();if(g&&(e[g]=r),i(r))T=r,O=E||k;else{O=E||S,T=[];for(var D in r)r.hasOwnProperty(D)&&"$"!=D.charAt(0)&&T.push(D);T.sort()}for(x=T.length,N=new Array(x),d=0;x>d;d++)if(A=r===T?d:T[d],M=r[A],C=O(A,M,d),$[C])P=$[C],delete $[C],_[C]=P,N[d]=P;else{if(_[C])throw o(N,function(e){e&&e.scope&&($[e.id]=e)}),l("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",h,C,M);N[d]={id:C,scope:n,clone:n},_[C]=!0}for(var V in $){if(P=$[V],R=le(P.clone),a.leave(R),R[0].parentNode)for(d=0,v=R.length;v>d;d++)R[d][s]=!0;P.scope.$destroy()}for(d=0;x>d;d++)if(A=r===T?d:T[d],M=r[A],P=N[d],P.scope){y=I;do y=y.nextSibling;while(y&&y[s]);c(P)!=y&&a.move(le(P.clone),null,nr(I)),I=f(P),u(P.scope,d,b,M,w,A,x)}else m(function(e,t){P.scope=t;var n=p.cloneNode(!1);e[e.length++]=n,a.enter(e,null,nr(I)),I=n,P.clone=e,_[P.id]=P,u(P.scope,d,b,M,w,A,x)});$=_})}}}}],To="ng-hide",Po="ng-hide-animate",No=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,To,{tempClasses:Po})})}}}],Ro=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,To,{tempClasses:Po})})}}}],Io=On(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&o(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),_o=["$animate",function(e){return{restrict:"EA",require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var s=i.ngSwitch||i.on,l=[],u=[],c=[],f=[],d=function(e,t){return function(){e.splice(t,1)}};n.$watch(s,function(n){var r,i;for(r=0,i=c.length;i>r;++r)e.cancel(c[r]);for(c.length=0,r=0,i=f.length;i>r;++r){var s=le(u[r].clone);f[r].$destroy();var h=c[r]=e.leave(s);h.then(d(c,r))}u.length=0,f.length=0,(l=a.cases["!"+n]||a.cases["?"])&&o(l,function(n){n.transclude(function(r,i){f.push(i);var o=n.element;r[r.length++]=t.createComment(" end ngSwitchWhen: ");var a={clone:r};u.push(a),e.enter(r,o.parent(),o)})})})}}}],Do=On({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:t})}}),Vo=On({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),Fo=On({restrict:"EAC",link:function(e,t,n,i,o){if(!o)throw r("ngTransclude")("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",z(t));o(function(e){t.empty(),t.append(e)})}}),jo=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){if("text/ng-template"==n.type){var r=n.id,i=t[0].text;e.put(r,i)}}}}],Uo=r("ngOptions"),qo=$({restrict:"A",terminal:!0}),Lo=["$compile","$parse",function(e,r){var i=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,s={$setViewValue:p};return{restrict:"E",require:["select","?ngModel"],controller:["$element","$scope","$attrs",function(e,t,n){var r,i,o=this,a={},l=s;o.databound=n.ngModel,o.init=function(e,t,n){l=e,r=t,i=n},o.addOption=function(t,n){ae(t,'"option value"'),a[t]=!0,l.$viewValue==t&&(e.val(t),i.parent()&&i.remove()),n&&n[0].hasAttribute("selected")&&(n[0].selected=!0)},o.removeOption=function(e){this.hasOption(e)&&(delete a[e],l.$viewValue===e&&this.renderUnknownOption(e))},o.renderUnknownOption=function(t){var n="? "+Ue(t)+" ?";i.val(n),e.prepend(i),e.val(n),i.prop("selected",!0)},o.hasOption=function(e){return a.hasOwnProperty(e)},t.$on("$destroy",function(){o.renderUnknownOption=p})}],link:function(s,l,u,c){function f(e,t,n,r){n.$render=function(){var e=n.$viewValue;r.hasOption(e)?(k.parent()&&k.remove(),t.val(e),""===e&&p.prop("selected",!0)):null==e&&p?t.val(""):r.renderUnknownOption(e)},t.on("change",function(){e.$apply(function(){k.parent()&&k.remove(),n.$setViewValue(t.val())})})}function d(e,t,n){var r;n.$render=function(){var e=new qe(n.$viewValue);o(t.find("option"),function(t){t.selected=g(e.get(t.value))})},e.$watch(function(){F(r,n.$viewValue)||(r=V(n.$viewValue),n.$render())}),t.on("change",function(){e.$apply(function(){var e=[];o(t.find("option"),function(t){
t.selected&&e.push(t.value)}),n.$setViewValue(e)})})}function h(t,s,l){function u(e,n,r){return F[M]=r,T&&(F[T]=n),e(t,F)}function c(){t.$apply(function(){var e,n=R(t)||[];if(v)e=[],o(s.val(),function(t){t=_?D[t]:t,e.push(f(t,n[t]))});else{var r=_?D[s.val()]:s.val();e=f(r,n[r])}l.$setViewValue(e),k()})}function f(e,t){if("?"===e)return n;if(""===e)return null;var r=O?O:N;return u(r,e,t)}function d(){var e,n=R(t);if(n&&hr(n)){e=new Array(n.length);for(var r=0,i=n.length;i>r;r++)e[r]=u(A,r,n[r]);return e}if(n){e={};for(var o in n)n.hasOwnProperty(o)&&(e[o]=u(A,o,n[o]))}return e}function h(e){var t;if(v)if(_&&hr(e)){t=new qe([]);for(var n=0;n<e.length;n++)t.put(u(_,null,e[n]),!0)}else t=new qe(e);else _&&(e=u(_,null,e));return function(n,r){var i;return i=_?_:O?O:N,v?g(t.remove(u(i,n,r))):e===u(i,n,r)}}function p(){w||(t.$$postDigest(k),w=!0)}function $(e,t,n){e[t]=e[t]||0,e[t]+=n?1:-1}function k(){w=!1;var e,n,r,i,c,f,d,p,y,k,S,M,C,O,N,I,j,U={"":[]},q=[""],L=l.$viewValue,H=R(t)||[],B=T?a(H):H,z={},W=h(L),G=!1;for(D={},M=0;k=B.length,k>M;M++)d=M,T&&(d=B[M],"$"===d.charAt(0))||(p=H[d],e=u(P,d,p)||"",(n=U[e])||(n=U[e]=[],q.push(e)),C=W(d,p),G=G||C,I=u(A,d,p),I=g(I)?I:"",j=_?_(t,F):T?B[M]:M,_&&(D[j]=d),n.push({id:j,label:I,selected:C}));for(v||(b||null===L?U[""].unshift({id:"",label:"",selected:!G}):G||U[""].unshift({id:"?",label:"",selected:!0})),S=0,y=q.length;y>S;S++){for(e=q[S],n=U[e],V.length<=S?(i={element:E.clone().attr("label",e),label:n.label},c=[i],V.push(c),s.append(i.element)):(c=V[S],i=c[0],i.label!=e&&i.element.attr("label",i.label=e)),O=null,M=0,k=n.length;k>M;M++)r=n[M],(f=c[M+1])?(O=f.element,f.label!==r.label&&($(z,f.label,!1),$(z,r.label,!0),O.text(f.label=r.label),O.prop("label",f.label)),f.id!==r.id&&O.val(f.id=r.id),O[0].selected!==r.selected&&(O.prop("selected",f.selected=r.selected),tr&&O.prop("selected",f.selected))):(""===r.id&&b?N=b:(N=x.clone()).val(r.id).prop("selected",r.selected).attr("selected",r.selected).prop("label",r.label).text(r.label),c.push(f={element:N,label:r.label,id:r.id,selected:r.selected}),$(z,r.label,!0),O?O.after(N):i.element.append(N),O=N);for(M++;c.length>M;)r=c.pop(),$(z,r.label,!1),r.element.remove()}for(;V.length>S;){for(n=V.pop(),M=1;M<n.length;++M)$(z,n[M].label,!1);n[0].element.remove()}o(z,function(e,t){e>0?m.addOption(t):0>e&&m.removeOption(t)})}var S;if(!(S=y.match(i)))throw Uo("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",y,z(s));var A=r(S[2]||S[1]),M=S[4]||S[6],C=/ as /.test(S[0])&&S[1],O=C?r(C):null,T=S[5],P=r(S[3]||""),N=r(S[2]?S[1]:M),R=r(S[7]),I=S[8],_=I?r(S[8]):null,D={},V=[[{element:s,label:""}]],F={};b&&(e(b)(t),b.removeClass("ng-scope"),b.remove()),s.empty(),s.on("change",c),l.$render=k,t.$watchCollection(R,p),t.$watchCollection(d,p),v&&t.$watchCollection(function(){return l.$modelValue},p)}if(c[1]){for(var p,m=c[0],$=c[1],v=u.multiple,y=u.ngOptions,b=!1,w=!1,x=nr(t.createElement("option")),E=nr(t.createElement("optgroup")),k=x.clone(),S=0,A=l.children(),M=A.length;M>S;S++)if(""===A[S].value){p=b=A.eq(S);break}m.init($,b,k),v&&($.$isEmpty=function(e){return!e||0===e.length}),y?h(s,l,$):v?d(s,l,$):f(s,l,$,m)}}}}],Ho=["$interpolate",function(e){var t={addOption:p,removeOption:p};return{restrict:"E",priority:100,compile:function(n,r){if(v(r.value)){var i=e(n.text(),!0);i||r.$set("value",n.text())}return function(e,n,r){var o="$selectController",a=n.parent(),s=a.data(o)||a.parent().data(o);s&&s.databound||(s=t),i?e.$watch(i,function(e,t){r.$set("value",e),t!==e&&s.removeOption(t),s.addOption(e,n)}):s.addOption(r.value,n),n.on("$destroy",function(){s.removeOption(r.value)})}}}}],Bo=$({restrict:"E",terminal:!1}),zo=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},Wo=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,i,o){if(o){var a,s=i.ngPattern||i.pattern;i.$observe("pattern",function(e){if(b(e)&&e.length>0&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw r("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",s,e,z(t));a=e||n,o.$validate()}),o.$validators.pattern=function(e,t){return o.$isEmpty(t)||v(a)||a.test(t)}}}}},Go=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=-1;n.$observe("maxlength",function(e){var t=d(e);i=isNaN(t)?-1:t,r.$validate()}),r.$validators.maxlength=function(e,t){return 0>i||r.$isEmpty(t)||t.length<=i}}}}},Ko=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=d(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=i}}}}};return e.angular.bootstrap?void console.log("WARNING: Tried to load angular more than once."):(re(),he(cr),void nr(t).ready(function(){Z(t,Q)}))}(window,document),!window.angular.$$csp()&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}</style>'),function(e,t){"function"==typeof define&&define.amd?define([],t):"undefined"!=typeof module&&module.exports?module.exports=t():e.tv4=t()}(this,function(){function e(t,n){if(t===n)return!0;if("object"==typeof t&&"object"==typeof n){if(Array.isArray(t)!==Array.isArray(n))return!1;if(Array.isArray(t)){if(t.length!==n.length)return!1;for(var r=0;r<t.length;r++)if(!e(t[r],n[r]))return!1}else{var i;for(i in t)if(void 0===n[i]&&void 0!==t[i])return!1;for(i in n)if(void 0===t[i]&&void 0!==n[i])return!1;for(i in t)if(!e(t[i],n[i]))return!1}return!0}return!1}function t(e){var t=String(e).replace(/^\s+|\s+$/g,"").match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);return t?{href:t[0]||"",protocol:t[1]||"",authority:t[2]||"",host:t[3]||"",hostname:t[4]||"",port:t[5]||"",pathname:t[6]||"",search:t[7]||"",hash:t[8]||""}:null}function n(e,n){function r(e){var t=[];return e.replace(/^(\.\.?(\/|$))+/,"").replace(/\/(\.(\/|$))+/g,"/").replace(/\/\.\.$/,"/../").replace(/\/?[^\/]*/g,function(e){"/.."===e?t.pop():t.push(e)}),t.join("").replace(/^\//,"/"===e.charAt(0)?"/":"")}return n=t(n||""),e=t(e||""),n&&e?(n.protocol||e.protocol)+(n.protocol||n.authority?n.authority:e.authority)+r(n.protocol||n.authority||"/"===n.pathname.charAt(0)?n.pathname:n.pathname?(e.authority&&!e.pathname?"/":"")+e.pathname.slice(0,e.pathname.lastIndexOf("/")+1)+n.pathname:e.pathname)+(n.protocol||n.authority||n.pathname?n.search:n.search||e.search)+n.hash:null}function r(e){return e.split("#")[0]}function i(e,t){if(e&&"object"==typeof e)if(void 0===t?t=e.id:"string"==typeof e.id&&(t=n(t,e.id),e.id=t),Array.isArray(e))for(var r=0;r<e.length;r++)i(e[r],t);else{"string"==typeof e.$ref&&(e.$ref=n(t,e.$ref));for(var o in e)"enum"!==o&&i(e[o],t)}}function o(e,t,n,r,i){if(Error.call(this),void 0===e)throw new Error("No code supplied for error: "+t);this.message=t,this.code=e,this.dataPath=n||"",this.schemaPath=r||"",this.subErrors=i||null;var o=new Error(this.message);if(this.stack=o.stack||o.stacktrace,!this.stack)try{throw o}catch(o){this.stack=o.stack||o.stacktrace}}function a(e,t){if(t.substring(0,e.length)===e){var n=t.substring(e.length);if(t.length>0&&"/"===t.charAt(e.length-1)||"#"===n.charAt(0)||"?"===n.charAt(0))return!0}return!1}function s(e){var t=new l,o=e||"en",a={addFormat:function(){t.addFormat.apply(t,arguments)},language:function(e){return e?(h[e]||(e=e.split("-")[0]),h[e]?(o=e,e):!1):o},addLanguage:function(e,t){var n;for(n in u)t[n]&&!t[u[n]]&&(t[u[n]]=t[n]);var r=e.split("-")[0];if(h[r]){h[e]=Object.create(h[r]);for(n in t)"undefined"==typeof h[r][n]&&(h[r][n]=t[n]),h[e][n]=t[n]}else h[e]=t,h[r]=t;return this},freshApi:function(e){var t=s();return e&&t.language(e),t},validate:function(e,n,r,i){var a=new l(t,!1,h[o],r,i);"string"==typeof n&&(n={$ref:n}),a.addSchema("",n);var s=a.validateAll(e,n,null,null,"");return!s&&i&&(s=a.banUnknownProperties()),this.error=s,this.missing=a.missing,this.valid=null===s,this.valid},validateResult:function(){var e={};return this.validate.apply(e,arguments),e},validateMultiple:function(e,n,r,i){var a=new l(t,!0,h[o],r,i);"string"==typeof n&&(n={$ref:n}),a.addSchema("",n),a.validateAll(e,n,null,null,""),i&&a.banUnknownProperties();var s={};return s.errors=a.errors,s.missing=a.missing,s.valid=0===s.errors.length,s},addSchema:function(){return t.addSchema.apply(t,arguments)},getSchema:function(){return t.getSchema.apply(t,arguments)},getSchemaMap:function(){return t.getSchemaMap.apply(t,arguments)},getSchemaUris:function(){return t.getSchemaUris.apply(t,arguments)},getMissingUris:function(){return t.getMissingUris.apply(t,arguments)},dropSchemas:function(){t.dropSchemas.apply(t,arguments)},defineKeyword:function(){t.defineKeyword.apply(t,arguments)},defineError:function(e,t,n){if("string"!=typeof e||!/^[A-Z]+(_[A-Z]+)*$/.test(e))throw new Error("Code name must be a string in UPPER_CASE_WITH_UNDERSCORES");if("number"!=typeof t||t%1!==0||1e4>t)throw new Error("Code number must be an integer > 10000");if("undefined"!=typeof u[e])throw new Error("Error already defined: "+e+" as "+u[e]);if("undefined"!=typeof c[t])throw new Error("Error code already used: "+c[t]+" as "+t);u[e]=t,c[t]=e,d[e]=d[t]=n;for(var r in h){var i=h[r];i[e]&&(i[t]=i[t]||i[e])}},reset:function(){t.reset(),this.error=null,this.missing=[],this.valid=!0},missing:[],error:null,valid:!0,normSchema:i,resolveUrl:n,getDocumentUri:r,errorCodes:u};return a}Object.keys||(Object.keys=function(){var e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),n=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],r=n.length;return function(i){if("object"!=typeof i&&"function"!=typeof i||null===i)throw new TypeError("Object.keys called on non-object");var o=[];for(var a in i)e.call(i,a)&&o.push(a);if(t)for(var s=0;r>s;s++)e.call(i,n[s])&&o.push(n[s]);return o}}()),Object.create||(Object.create=function(){function e(){}return function(t){if(1!==arguments.length)throw new Error("Object.create implementation only accepts one parameter.");return e.prototype=t,new e}}()),Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){if(null===this)throw new TypeError;var t=Object(this),n=t.length>>>0;if(0===n)return-1;var r=0;if(arguments.length>1&&(r=Number(arguments[1]),r!==r?r=0:0!==r&&r!==1/0&&r!==-(1/0)&&(r=(r>0||-1)*Math.floor(Math.abs(r)))),r>=n)return-1;for(var i=r>=0?r:Math.max(n-Math.abs(r),0);n>i;i++)if(i in t&&t[i]===e)return i;return-1}),Object.isFrozen||(Object.isFrozen=function(e){for(var t="tv4_test_frozen_key";e.hasOwnProperty(t);)t+=Math.random();try{return e[t]=!0,delete e[t],!1}catch(n){return!0}});var l=function(e,t,n,r,i){if(this.missing=[],this.missingMap={},this.formatValidators=e?Object.create(e.formatValidators):{},this.schemas=e?Object.create(e.schemas):{},this.collectMultiple=t,this.errors=[],this.handleError=t?this.collectError:this.returnError,r&&(this.checkRecursive=!0,this.scanned=[],this.scannedFrozen=[],this.scannedFrozenSchemas=[],this.scannedFrozenValidationErrors=[],this.validatedSchemasKey="tv4_validation_id",this.validationErrorsKey="tv4_validation_errors_id"),i&&(this.trackUnknownProperties=!0,this.knownPropertyPaths={},this.unknownPropertyPaths={}),this.errorMessages=n,this.definedKeywords={},e)for(var o in e.definedKeywords)this.definedKeywords[o]=e.definedKeywords[o].slice(0)};l.prototype.defineKeyword=function(e,t){this.definedKeywords[e]=this.definedKeywords[e]||[],this.definedKeywords[e].push(t)},l.prototype.createError=function(e,t,n,r,i){var a=this.errorMessages[e]||d[e];if("string"!=typeof a)return new o(e,"Unknown error code "+e+": "+JSON.stringify(t),n,r,i);var s=a.replace(/\{([^{}]*)\}/g,function(e,n){var r=t[n];return"string"==typeof r||"number"==typeof r?r:e});return new o(e,s,n,r,i)},l.prototype.returnError=function(e){return e},l.prototype.collectError=function(e){return e&&this.errors.push(e),null},l.prototype.prefixErrors=function(e,t,n){for(var r=e;r<this.errors.length;r++)this.errors[r]=this.errors[r].prefixWith(t,n);return this},l.prototype.banUnknownProperties=function(){for(var e in this.unknownPropertyPaths){var t=this.createError(u.UNKNOWN_PROPERTY,{path:e},e,""),n=this.handleError(t);if(n)return n}return null},l.prototype.addFormat=function(e,t){if("object"==typeof e){for(var n in e)this.addFormat(n,e[n]);return this}this.formatValidators[e]=t},l.prototype.resolveRefs=function(e,t){if(void 0!==e.$ref){if(t=t||{},t[e.$ref])return this.createError(u.CIRCULAR_REFERENCE,{urls:Object.keys(t).join(", ")},"","");t[e.$ref]=!0,e=this.getSchema(e.$ref,t)}return e},l.prototype.getSchema=function(e,t){var n;if(void 0!==this.schemas[e])return n=this.schemas[e],this.resolveRefs(n,t);var r=e,i="";if(-1!==e.indexOf("#")&&(i=e.substring(e.indexOf("#")+1),r=e.substring(0,e.indexOf("#"))),"object"==typeof this.schemas[r]){n=this.schemas[r];var o=decodeURIComponent(i);if(""===o)return this.resolveRefs(n,t);if("/"!==o.charAt(0))return;for(var a=o.split("/").slice(1),s=0;s<a.length;s++){var l=a[s].replace(/~1/g,"/").replace(/~0/g,"~");if(void 0===n[l]){n=void 0;break}n=n[l]}if(void 0!==n)return this.resolveRefs(n,t)}void 0===this.missing[r]&&(this.missing.push(r),this.missing[r]=r,this.missingMap[r]=r)},l.prototype.searchSchemas=function(e,t){if(e&&"object"==typeof e){"string"==typeof e.id&&a(t,e.id)&&void 0===this.schemas[e.id]&&(this.schemas[e.id]=e);for(var n in e)if("enum"!==n)if("object"==typeof e[n])this.searchSchemas(e[n],t);else if("$ref"===n){var i=r(e[n]);i&&void 0===this.schemas[i]&&void 0===this.missingMap[i]&&(this.missingMap[i]=i)}}},l.prototype.addSchema=function(e,t){if("string"!=typeof e||"undefined"==typeof t){if("object"!=typeof e||"string"!=typeof e.id)return;t=e,e=t.id}(e=r(e)+"#")&&(e=r(e)),this.schemas[e]=t,delete this.missingMap[e],i(t,e),this.searchSchemas(t,e)},l.prototype.getSchemaMap=function(){var e={};for(var t in this.schemas)e[t]=this.schemas[t];return e},l.prototype.getSchemaUris=function(e){var t=[];for(var n in this.schemas)e&&!e.test(n)||t.push(n);return t},l.prototype.getMissingUris=function(e){var t=[];for(var n in this.missingMap)e&&!e.test(n)||t.push(n);return t},l.prototype.dropSchemas=function(){this.schemas={},this.reset()},l.prototype.reset=function(){this.missing=[],this.missingMap={},this.errors=[]},l.prototype.validateAll=function(e,t,n,r,i){var a;if(t=this.resolveRefs(t),!t)return null;if(t instanceof o)return this.errors.push(t),t;var s,l=this.errors.length,u=null,c=null;if(this.checkRecursive&&e&&"object"==typeof e){if(a=!this.scanned.length,e[this.validatedSchemasKey]){var f=e[this.validatedSchemasKey].indexOf(t);if(-1!==f)return this.errors=this.errors.concat(e[this.validationErrorsKey][f]),null}if(Object.isFrozen(e)&&(s=this.scannedFrozen.indexOf(e),-1!==s)){var d=this.scannedFrozenSchemas[s].indexOf(t);if(-1!==d)return this.errors=this.errors.concat(this.scannedFrozenValidationErrors[s][d]),null}if(this.scanned.push(e),Object.isFrozen(e))-1===s&&(s=this.scannedFrozen.length,this.scannedFrozen.push(e),this.scannedFrozenSchemas.push([])),u=this.scannedFrozenSchemas[s].length,this.scannedFrozenSchemas[s][u]=t,this.scannedFrozenValidationErrors[s][u]=[];else{if(!e[this.validatedSchemasKey])try{Object.defineProperty(e,this.validatedSchemasKey,{value:[],configurable:!0}),Object.defineProperty(e,this.validationErrorsKey,{value:[],configurable:!0})}catch(h){e[this.validatedSchemasKey]=[],e[this.validationErrorsKey]=[]}c=e[this.validatedSchemasKey].length,e[this.validatedSchemasKey][c]=t,e[this.validationErrorsKey][c]=[]}}var p=this.errors.length,m=this.validateBasic(e,t,i)||this.validateNumeric(e,t,i)||this.validateString(e,t,i)||this.validateArray(e,t,i)||this.validateObject(e,t,i)||this.validateCombinations(e,t,i)||this.validateFormat(e,t,i)||this.validateDefinedKeywords(e,t,i)||null;if(a){for(;this.scanned.length;){var $=this.scanned.pop();delete $[this.validatedSchemasKey]}this.scannedFrozen=[],this.scannedFrozenSchemas=[]}if(m||p!==this.errors.length)for(;n&&n.length||r&&r.length;){var v=n&&n.length?""+n.pop():null,g=r&&r.length?""+r.pop():null;m&&(m=m.prefixWith(v,g)),this.prefixErrors(p,v,g)}return null!==u?this.scannedFrozenValidationErrors[s][u]=this.errors.slice(l):null!==c&&(e[this.validationErrorsKey][c]=this.errors.slice(l)),this.handleError(m)},l.prototype.validateFormat=function(e,t){if("string"!=typeof t.format||!this.formatValidators[t.format])return null;var n=this.formatValidators[t.format].call(null,e,t);return"string"==typeof n||"number"==typeof n?this.createError(u.FORMAT_CUSTOM,{message:n}).prefixWith(null,"format"):n&&"object"==typeof n?this.createError(u.FORMAT_CUSTOM,{message:n.message||"?"},n.dataPath||null,n.schemaPath||"/format"):null},l.prototype.validateDefinedKeywords=function(e,t){for(var n in this.definedKeywords)for(var r=this.definedKeywords[n],i=0;i<r.length;i++){var o=r[i],a=o(e,t[n],t);if("string"==typeof a||"number"==typeof a)return this.createError(u.KEYWORD_CUSTOM,{key:n,message:a}).prefixWith(null,"format");if(a&&"object"==typeof a){var s=a.code||u.KEYWORD_CUSTOM;if("string"==typeof s){if(!u[s])throw new Error("Undefined error code (use defineError): "+s);s=u[s]}var l="object"==typeof a.message?a.message:{key:n,message:a.message||"?"},c=a.schemaPath||"/"+n.replace(/~/g,"~0").replace(/\//g,"~1");return this.createError(s,l,a.dataPath||null,c)}}return null},l.prototype.validateBasic=function(e,t,n){var r;return(r=this.validateType(e,t,n))?r.prefixWith(null,"type"):(r=this.validateEnum(e,t,n))?r.prefixWith(null,"type"):null},l.prototype.validateType=function(e,t){if(void 0===t.type)return null;var n=typeof e;null===e?n="null":Array.isArray(e)&&(n="array");var r=t.type;"object"!=typeof r&&(r=[r]);for(var i=0;i<r.length;i++){var o=r[i];if(o===n||"integer"===o&&"number"===n&&e%1===0)return null}return this.createError(u.INVALID_TYPE,{type:n,expected:r.join("/")})},l.prototype.validateEnum=function(t,n){if(void 0===n["enum"])return null;for(var r=0;r<n["enum"].length;r++){var i=n["enum"][r];if(e(t,i))return null}return this.createError(u.ENUM_MISMATCH,{value:"undefined"!=typeof JSON?JSON.stringify(t):t})},l.prototype.validateNumeric=function(e,t,n){return this.validateMultipleOf(e,t,n)||this.validateMinMax(e,t,n)||null},l.prototype.validateMultipleOf=function(e,t){var n=t.multipleOf||t.divisibleBy;return void 0===n?null:"number"==typeof e&&e%n!==0?this.createError(u.NUMBER_MULTIPLE_OF,{value:e,multipleOf:n}):null},l.prototype.validateMinMax=function(e,t){if("number"!=typeof e)return null;if(void 0!==t.minimum){if(e<t.minimum)return this.createError(u.NUMBER_MINIMUM,{value:e,minimum:t.minimum}).prefixWith(null,"minimum");if(t.exclusiveMinimum&&e===t.minimum)return this.createError(u.NUMBER_MINIMUM_EXCLUSIVE,{value:e,minimum:t.minimum}).prefixWith(null,"exclusiveMinimum")}if(void 0!==t.maximum){if(e>t.maximum)return this.createError(u.NUMBER_MAXIMUM,{value:e,maximum:t.maximum}).prefixWith(null,"maximum");if(t.exclusiveMaximum&&e===t.maximum)return this.createError(u.NUMBER_MAXIMUM_EXCLUSIVE,{value:e,maximum:t.maximum}).prefixWith(null,"exclusiveMaximum")}return null},l.prototype.validateString=function(e,t,n){return this.validateStringLength(e,t,n)||this.validateStringPattern(e,t,n)||null},l.prototype.validateStringLength=function(e,t){return"string"!=typeof e?null:void 0!==t.minLength&&e.length<t.minLength?this.createError(u.STRING_LENGTH_SHORT,{length:e.length,minimum:t.minLength}).prefixWith(null,"minLength"):void 0!==t.maxLength&&e.length>t.maxLength?this.createError(u.STRING_LENGTH_LONG,{length:e.length,maximum:t.maxLength}).prefixWith(null,"maxLength"):null},l.prototype.validateStringPattern=function(e,t){if("string"!=typeof e||void 0===t.pattern)return null;var n=new RegExp(t.pattern);return n.test(e)?null:this.createError(u.STRING_PATTERN,{pattern:t.pattern}).prefixWith(null,"pattern")},l.prototype.validateArray=function(e,t,n){return Array.isArray(e)?this.validateArrayLength(e,t,n)||this.validateArrayUniqueItems(e,t,n)||this.validateArrayItems(e,t,n)||null:null},l.prototype.validateArrayLength=function(e,t){var n;return void 0!==t.minItems&&e.length<t.minItems&&(n=this.createError(u.ARRAY_LENGTH_SHORT,{length:e.length,minimum:t.minItems}).prefixWith(null,"minItems"),this.handleError(n))?n:void 0!==t.maxItems&&e.length>t.maxItems&&(n=this.createError(u.ARRAY_LENGTH_LONG,{length:e.length,maximum:t.maxItems}).prefixWith(null,"maxItems"),this.handleError(n))?n:null},l.prototype.validateArrayUniqueItems=function(t,n){if(n.uniqueItems)for(var r=0;r<t.length;r++)for(var i=r+1;i<t.length;i++)if(e(t[r],t[i])){var o=this.createError(u.ARRAY_UNIQUE,{match1:r,match2:i}).prefixWith(null,"uniqueItems");if(this.handleError(o))return o}return null},l.prototype.validateArrayItems=function(e,t,n){if(void 0===t.items)return null;var r,i;if(Array.isArray(t.items)){for(i=0;i<e.length;i++)if(i<t.items.length){if(r=this.validateAll(e[i],t.items[i],[i],["items",i],n+"/"+i))return r}else if(void 0!==t.additionalItems)if("boolean"==typeof t.additionalItems){if(!t.additionalItems&&(r=this.createError(u.ARRAY_ADDITIONAL_ITEMS,{}).prefixWith(""+i,"additionalItems"),this.handleError(r)))return r}else if(r=this.validateAll(e[i],t.additionalItems,[i],["additionalItems"],n+"/"+i))return r}else for(i=0;i<e.length;i++)if(r=this.validateAll(e[i],t.items,[i],["items"],n+"/"+i))return r;return null},l.prototype.validateObject=function(e,t,n){return"object"!=typeof e||null===e||Array.isArray(e)?null:this.validateObjectMinMaxProperties(e,t,n)||this.validateObjectRequiredProperties(e,t,n)||this.validateObjectProperties(e,t,n)||this.validateObjectDependencies(e,t,n)||null},l.prototype.validateObjectMinMaxProperties=function(e,t){var n,r=Object.keys(e);return void 0!==t.minProperties&&r.length<t.minProperties&&(n=this.createError(u.OBJECT_PROPERTIES_MINIMUM,{propertyCount:r.length,minimum:t.minProperties}).prefixWith(null,"minProperties"),this.handleError(n))?n:void 0!==t.maxProperties&&r.length>t.maxProperties&&(n=this.createError(u.OBJECT_PROPERTIES_MAXIMUM,{propertyCount:r.length,maximum:t.maxProperties}).prefixWith(null,"maxProperties"),this.handleError(n))?n:null},l.prototype.validateObjectRequiredProperties=function(e,t){if(void 0!==t.required)for(var n=0;n<t.required.length;n++){var r=t.required[n];if(void 0===e[r]){var i=this.createError(u.OBJECT_REQUIRED,{key:r}).prefixWith(null,""+n).prefixWith(null,"required");if(this.handleError(i))return i}}return null},l.prototype.validateObjectProperties=function(e,t,n){var r;for(var i in e){var o=n+"/"+i.replace(/~/g,"~0").replace(/\//g,"~1"),a=!1;if(void 0!==t.properties&&void 0!==t.properties[i]&&(a=!0,r=this.validateAll(e[i],t.properties[i],[i],["properties",i],o)))return r;if(void 0!==t.patternProperties)for(var s in t.patternProperties){var l=new RegExp(s);if(l.test(i)&&(a=!0,r=this.validateAll(e[i],t.patternProperties[s],[i],["patternProperties",s],o)))return r}if(a)this.trackUnknownProperties&&(this.knownPropertyPaths[o]=!0,delete this.unknownPropertyPaths[o]);else if(void 0!==t.additionalProperties){if(this.trackUnknownProperties&&(this.knownPropertyPaths[o]=!0,delete this.unknownPropertyPaths[o]),"boolean"==typeof t.additionalProperties){if(!t.additionalProperties&&(r=this.createError(u.OBJECT_ADDITIONAL_PROPERTIES,{}).prefixWith(i,"additionalProperties"),this.handleError(r)))return r}else if(r=this.validateAll(e[i],t.additionalProperties,[i],["additionalProperties"],o))return r}else this.trackUnknownProperties&&!this.knownPropertyPaths[o]&&(this.unknownPropertyPaths[o]=!0)}return null},l.prototype.validateObjectDependencies=function(e,t,n){var r;if(void 0!==t.dependencies)for(var i in t.dependencies)if(void 0!==e[i]){var o=t.dependencies[i];if("string"==typeof o){if(void 0===e[o]&&(r=this.createError(u.OBJECT_DEPENDENCY_KEY,{key:i,missing:o}).prefixWith(null,i).prefixWith(null,"dependencies"),this.handleError(r)))return r}else if(Array.isArray(o))for(var a=0;a<o.length;a++){var s=o[a];if(void 0===e[s]&&(r=this.createError(u.OBJECT_DEPENDENCY_KEY,{key:i,missing:s}).prefixWith(null,""+a).prefixWith(null,i).prefixWith(null,"dependencies"),this.handleError(r)))return r}else if(r=this.validateAll(e,o,[],["dependencies",i],n))return r}return null},l.prototype.validateCombinations=function(e,t,n){return this.validateAllOf(e,t,n)||this.validateAnyOf(e,t,n)||this.validateOneOf(e,t,n)||this.validateNot(e,t,n)||null},l.prototype.validateAllOf=function(e,t,n){if(void 0===t.allOf)return null;for(var r,i=0;i<t.allOf.length;i++){var o=t.allOf[i];if(r=this.validateAll(e,o,[],["allOf",i],n))return r}return null},l.prototype.validateAnyOf=function(e,t,n){if(void 0===t.anyOf)return null;var r,i,o=[],a=this.errors.length;this.trackUnknownProperties&&(r=this.unknownPropertyPaths,i=this.knownPropertyPaths);for(var s=!0,l=0;l<t.anyOf.length;l++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.anyOf[l],f=this.errors.length,d=this.validateAll(e,c,[],["anyOf",l],n);if(null===d&&f===this.errors.length){if(this.errors=this.errors.slice(0,a),this.trackUnknownProperties){for(var h in this.knownPropertyPaths)i[h]=!0,delete r[h];for(var p in this.unknownPropertyPaths)i[p]||(r[p]=!0);s=!1;continue}return null}d&&o.push(d.prefixWith(null,""+l).prefixWith(null,"anyOf"))}return this.trackUnknownProperties&&(this.unknownPropertyPaths=r,this.knownPropertyPaths=i),s?(o=o.concat(this.errors.slice(a)),this.errors=this.errors.slice(0,a),this.createError(u.ANY_OF_MISSING,{},"","/anyOf",o)):void 0},l.prototype.validateOneOf=function(e,t,n){if(void 0===t.oneOf)return null;var r,i,o=null,a=[],s=this.errors.length;this.trackUnknownProperties&&(r=this.unknownPropertyPaths,i=this.knownPropertyPaths);for(var l=0;l<t.oneOf.length;l++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.oneOf[l],f=this.errors.length,d=this.validateAll(e,c,[],["oneOf",l],n);if(null===d&&f===this.errors.length){if(null!==o)return this.errors=this.errors.slice(0,s),this.createError(u.ONE_OF_MULTIPLE,{index1:o,index2:l},"","/oneOf");if(o=l,this.trackUnknownProperties){for(var h in this.knownPropertyPaths)i[h]=!0,delete r[h];for(var p in this.unknownPropertyPaths)i[p]||(r[p]=!0)}}else d&&a.push(d.prefixWith(null,""+l).prefixWith(null,"oneOf"))}return this.trackUnknownProperties&&(this.unknownPropertyPaths=r,this.knownPropertyPaths=i),null===o?(a=a.concat(this.errors.slice(s)),this.errors=this.errors.slice(0,s),this.createError(u.ONE_OF_MISSING,{},"","/oneOf",a)):(this.errors=this.errors.slice(0,s),null)},l.prototype.validateNot=function(e,t,n){if(void 0===t.not)return null;var r,i,o=this.errors.length;this.trackUnknownProperties&&(r=this.unknownPropertyPaths,i=this.knownPropertyPaths,this.unknownPropertyPaths={},this.knownPropertyPaths={});var a=this.validateAll(e,t.not,null,null,n),s=this.errors.slice(o);return this.errors=this.errors.slice(0,o),this.trackUnknownProperties&&(this.unknownPropertyPaths=r,this.knownPropertyPaths=i),null===a&&0===s.length?this.createError(u.NOT_PASSED,{},"","/not"):null};var u={INVALID_TYPE:0,ENUM_MISMATCH:1,ANY_OF_MISSING:10,ONE_OF_MISSING:11,ONE_OF_MULTIPLE:12,NOT_PASSED:13,NUMBER_MULTIPLE_OF:100,NUMBER_MINIMUM:101,NUMBER_MINIMUM_EXCLUSIVE:102,NUMBER_MAXIMUM:103,NUMBER_MAXIMUM_EXCLUSIVE:104,STRING_LENGTH_SHORT:200,STRING_LENGTH_LONG:201,STRING_PATTERN:202,OBJECT_PROPERTIES_MINIMUM:300,OBJECT_PROPERTIES_MAXIMUM:301,OBJECT_REQUIRED:302,OBJECT_ADDITIONAL_PROPERTIES:303,OBJECT_DEPENDENCY_KEY:304,ARRAY_LENGTH_SHORT:400,ARRAY_LENGTH_LONG:401,ARRAY_UNIQUE:402,ARRAY_ADDITIONAL_ITEMS:403,FORMAT_CUSTOM:500,KEYWORD_CUSTOM:501,CIRCULAR_REFERENCE:600,UNKNOWN_PROPERTY:1e3},c={};for(var f in u)c[u[f]]=f;var d={INVALID_TYPE:"invalid type: {type} (expected {expected})",ENUM_MISMATCH:"No enum match for: {value}",ANY_OF_MISSING:'Data does not match any schemas from "anyOf"',ONE_OF_MISSING:'Data does not match any schemas from "oneOf"',ONE_OF_MULTIPLE:'Data is valid against more than one schema from "oneOf": indices {index1} and {index2}',NOT_PASSED:'Data matches schema from "not"',NUMBER_MULTIPLE_OF:"Value {value} is not a multiple of {multipleOf}",NUMBER_MINIMUM:"Value {value} is less than minimum {minimum}",NUMBER_MINIMUM_EXCLUSIVE:"Value {value} is equal to exclusive minimum {minimum}",NUMBER_MAXIMUM:"Value {value} is greater than maximum {maximum}",NUMBER_MAXIMUM_EXCLUSIVE:"Value {value} is equal to exclusive maximum {maximum}",STRING_LENGTH_SHORT:"String is too short ({length} chars), minimum {minimum}",STRING_LENGTH_LONG:"String is too long ({length} chars), maximum {maximum}",STRING_PATTERN:"String does not match pattern: {pattern}",OBJECT_PROPERTIES_MINIMUM:"Too few properties defined ({propertyCount}), minimum {minimum}",OBJECT_PROPERTIES_MAXIMUM:"Too many properties defined ({propertyCount}), maximum {maximum}",OBJECT_REQUIRED:"Missing required property: {key}",OBJECT_ADDITIONAL_PROPERTIES:"Additional properties not allowed",OBJECT_DEPENDENCY_KEY:"Dependency failed - key must exist: {missing} (due to key: {key})",ARRAY_LENGTH_SHORT:"Array is too short ({length}), minimum {minimum}",ARRAY_LENGTH_LONG:"Array is too long ({length}), maximum {maximum}",ARRAY_UNIQUE:"Array items are not unique (indices {match1} and {match2})",ARRAY_ADDITIONAL_ITEMS:"Additional items not allowed",FORMAT_CUSTOM:"Format validation failed ({message})",KEYWORD_CUSTOM:"Keyword failed: {key} ({message})",CIRCULAR_REFERENCE:"Circular $refs: {urls}",UNKNOWN_PROPERTY:"Unknown property (not in schema)"};o.prototype=Object.create(Error.prototype),o.prototype.constructor=o,o.prototype.name="ValidationError",o.prototype.prefixWith=function(e,t){if(null!==e&&(e=e.replace(/~/g,"~0").replace(/\//g,"~1"),this.dataPath="/"+e+this.dataPath),null!==t&&(t=t.replace(/~/g,"~0").replace(/\//g,"~1"),this.schemaPath="/"+t+this.schemaPath),null!==this.subErrors)for(var n=0;n<this.subErrors.length;n++)this.subErrors[n].prefixWith(e,t);return this};var h={},p=s();return p.addLanguage("en-gb",d),p.tv4=p,p}),function(e,t){"use strict";function n(){var e=!1;this.$get=["$$sanitizeUri",function(n){return e&&t.extend(x,b),function(e){var t=[];return o(e,l(t,function(e,t){return!/^unsafe:/.test(n(e,t))})),t.join("")}}],this.enableSvg=function(n){return t.isDefined(n)?(e=n,this):e}}function r(e){var n=[],r=l(n,t.noop);return r.chars(e),n.join("")}function i(e,n){var r,i={},o=e.split(",");for(r=0;r<o.length;r++)i[n?t.lowercase(o[r]):o[r]]=!0;return i}function o(t,n){null===t||void 0===t?t="":"string"!=typeof t&&(t=""+t),c.innerHTML=t;var r=5;do{if(0===r)throw f("uinput","Failed to sanitize html because the input is unstable");r--,e.document.documentMode&&u(c),t=c.innerHTML,c.innerHTML=t}while(t!==c.innerHTML);for(var i=c.firstChild;i;){switch(i.nodeType){case 1:n.start(i.nodeName.toLowerCase(),a(i.attributes));break;case 3:n.chars(i.textContent)}var o;if(!(o=i.firstChild)&&(1==i.nodeType&&n.end(i.nodeName.toLowerCase()),o=i.nextSibling,!o))for(;null==o&&(i=i.parentNode,i!==c);)o=i.nextSibling,1==i.nodeType&&n.end(i.nodeName.toLowerCase());i=o}for(;i=c.firstChild;)c.removeChild(i)}function a(e){for(var t={},n=0,r=e.length;r>n;n++){var i=e[n];t[i.name]=i.value}return t}function s(e){return e.replace(/&/g,"&amp;").replace(d,function(e){var t=e.charCodeAt(0),n=e.charCodeAt(1);return"&#"+(1024*(t-55296)+(n-56320)+65536)+";"}).replace(h,function(e){return"&#"+e.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function l(e,n){var r=!1,i=t.bind(e,e.push);return{start:function(e,o){e=t.lowercase(e),!r&&w[e]&&(r=e),r||x[e]!==!0||(i("<"),i(e),t.forEach(o,function(r,o){var a=t.lowercase(o),l="img"===e&&"src"===a||"background"===a;
A[a]!==!0||E[a]===!0&&!n(r,l)||(i(" "),i(o),i('="'),i(s(r)),i('"'))}),i(">"))},end:function(e){e=t.lowercase(e),r||x[e]!==!0||p[e]===!0||(i("</"),i(e),i(">")),e==r&&(r=!1)},chars:function(e){r||i(s(e))}}}function u(t){if(t.nodeType===e.Node.ELEMENT_NODE)for(var n=t.attributes,r=0,i=n.length;i>r;r++){var o=n[r],a=o.name.toLowerCase();"xmlns:ns1"!==a&&0!==a.indexOf("ns1:")||(t.removeAttributeNode(o),r--,i--)}var s=t.firstChild;s&&u(s),s=t.nextSibling,s&&u(s)}var c,f=t.$$minErr("$sanitize"),d=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,h=/([^\#-~ |!])/g,p=i("area,br,col,hr,img,wbr"),m=i("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),$=i("rp,rt"),v=t.extend({},$,m),g=t.extend({},m,i("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul")),y=t.extend({},$,i("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),b=i("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,stop,svg,switch,text,title,tspan"),w=i("script,style"),x=t.extend({},p,g,y,v),E=i("background,cite,href,longdesc,src,xlink:href"),k=i("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,valign,value,vspace,width"),S=i("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan",!0),A=t.extend({},E,S,k);!function(e){var t;if(!e.document||!e.document.implementation)throw f("noinert","Can't create an inert html document");t=e.document.implementation.createHTMLDocument("inert");var n=t.documentElement||t.getDocumentElement(),r=n.getElementsByTagName("body");if(1===r.length)c=r[0];else{var i=t.createElement("html");c=t.createElement("body"),i.appendChild(c),t.appendChild(i)}}(e),t.module("ngSanitize",[]).provider("$sanitize",n),t.module("ngSanitize").filter("linky",["$sanitize",function(e){var n=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,i=/^mailto:/i,o=t.$$minErr("linky"),a=t.isString;return function(s,l,u){function c(e){e&&$.push(r(e))}function f(e,n){var r;if($.push("<a "),t.isFunction(u)&&(u=u(e)),t.isObject(u))for(r in u)$.push(r+'="'+u[r]+'" ');else u={};!t.isDefined(l)||"target"in u||$.push('target="',l,'" '),$.push('href="',e.replace(/"/g,"&quot;"),'">'),c(n),$.push("</a>")}if(null==s||""===s)return s;if(!a(s))throw o("notstring","Expected string but received: {0}",s);for(var d,h,p,m=s,$=[];d=m.match(n);)h=d[0],d[2]||d[4]||(h=(d[3]?"http://":"mailto:")+h),p=d.index,c(m.substr(0,p)),f(h,d[0].replace(i,"")),m=m.substring(p+d[0].length);return c(m),e($.join(""))}}])}(window,window.angular),!function(e){var t={parse:function(e){if("string"!=typeof e)throw new TypeError("ObjectPath.parse must be passed a string");for(var t,n,r,i,o=0,a=[];o<e.length;)if(t=e.indexOf(".",o),n=e.indexOf("[",o),-1===t&&-1===n)a.push(e.slice(o,e.length)),o=e.length;else if(-1===n||-1!==t&&n>t)a.push(e.slice(o,t)),o=t+1;else if(n>o&&(a.push(e.slice(o,n)),o=n),r=e.slice(n+1,n+2),'"'!==r&&"'"!==r)i=e.indexOf("]",n),-1===i&&(i=e.length),a.push(e.slice(o+1,i)),o="."===e.slice(i+1,i+2)?i+2:i+1;else{for(i=e.indexOf(r+"]",n),-1===i&&(i=e.length);"\\"===e.slice(i-1,i)&&n<e.length;)n++,i=e.indexOf(r+"]",n);a.push(e.slice(o+2,i).replace(new RegExp("\\"+r,"g"),r)),o="."===e.slice(i+2,i+3)?i+3:i+2}return a},stringify:function(e,t){return Array.isArray(e)||(e=[e.toString()]),t='"'===t?'"':"'",e.map(function(e){return"["+t+e.toString().replace(new RegExp(t,"g"),"\\"+t)+t+"]"}).join("")},normalize:function(e,n){return t.stringify(Array.isArray(e)?e:t.parse(e),n)},registerModule:function(e){e.module("ObjectPath",[]).provider("ObjectPath",function(){this.parse=t.parse,this.stringify=t.stringify,this.normalize=t.normalize,this.$get=function(){return t}})}};"function"==typeof define&&define.amd?define(function(){return t}):"object"==typeof exports?exports.ObjectPath=t:window.ObjectPath=t}(),function(e,t){"function"==typeof define&&define.amd?define(["angular","objectpath","tv4"],t):"object"==typeof exports?module.exports=t(require("angular"),require("objectpath"),require("tv4")):e.schemaForm=t(e.angular,e.objectpath,e.tv4)}(this,function(e,t,n){var r=[];try{e.module("ngSanitize"),r.push("ngSanitize")}catch(i){}try{e.module("ui.sortable"),r.push("ui.sortable")}catch(i){}try{e.module("angularSpectrumColorpicker"),r.push("angularSpectrumColorpicker")}catch(i){}var o=e.module("schemaForm",r);return e.module("schemaForm").provider("sfPath",[function(){var n=window.ObjectPath||t,r={parse:n.parse};1===e.version.major&&e.version.minor<3?r.stringify=function(e){return Array.isArray(e)?e.join("."):e.toString()}:r.stringify=n.stringify,r.normalize=function(e,t){return r.stringify(Array.isArray(e)?e:r.parse(e),t)},this.parse=r.parse,this.stringify=r.stringify,this.normalize=r.normalize,this.$get=function(){return r}}]),e.module("schemaForm").provider("sfBuilder",["sfPathProvider",function(t){var n=/[A-Z]/g,r=function(e,t){return t=t||"_",e.replace(n,function(e,n){return(n?t:"")+e.toLowerCase()})},i=0,o={sfField:function(e){e.fieldFrag.firstChild.setAttribute("sf-field",i),e.lookup["f"+i]=e.form,i++},ngModel:function(e){if(e.form.key){var n=e.form.key;e.state.keyRedaction&&(n=n.slice(e.state.keyRedaction));var r;if(e.state.modelValue)r=e.state.modelValue;else{var i=t.stringify(n).replace(/"/g,"&quot;");r=e.state.modelName||"model",i&&(r+=("["!==i[0]?".":"")+i)}for(var o=e.fieldFrag.querySelectorAll("[sf-field-model]"),a=0;a<o.length;a++){var s=o[a],l=s.getAttribute("sf-field-model");if(l&&""!==l)if("replaceAll"===l)for(var u=s.attributes,c=0;c<u.length;c++)u[c].value&&-1!==u[c].value.indexOf("$$value")&&(u[c].value=u[c].value.replace(/\$\$value\$\$/g,r));else{var f=s.getAttribute(l);f&&f.indexOf("$$value$$")?s.setAttribute(l,f.replace(/\$\$value\$\$/g,r)):s.setAttribute(l,r)}else s.setAttribute("ng-model",r)}}},simpleTransclusion:function(e){var t=e.build(e.form.items,e.path+".items",e.state);e.fieldFrag.firstChild.appendChild(t)},ngModelOptions:function(e){e.form.ngModelOptions&&Object.keys(e.form.ngModelOptions).length>0&&e.fieldFrag.firstChild.setAttribute("ng-model-options",JSON.stringify(e.form.ngModelOptions))},transclusion:function(e){var t=e.fieldFrag.querySelectorAll("[sf-field-transclude]");if(t.length)for(var n=0;n<t.length;n++){var r=t[n],i=r.getAttribute("sf-field-transclude")||"items",o=e.form[i];if(o){var a=e.build(o,e.path+"."+i,e.state);r.appendChild(a)}}},condition:function(e){if(e.form.condition){var n="evalExpr("+e.path+'.condition, { model: model, "arrayIndex": $index})';if(e.form.key){var r=t.stringify(e.form.key);n="evalExpr("+e.path+'.condition,{ model: model, "arrayIndex": $index, "modelValue": model'+("["===r[0]?"":".")+r+"})"}for(var i=e.fieldFrag.children||e.fieldFrag.childNodes,o=0;o<i.length;o++){var a=i[o],s=a.getAttribute("ng-if");a.setAttribute("ng-if",s?"("+s+") || ("+n+")":n)}}},array:function(n){var r=n.fieldFrag.querySelector("[schema-form-array-items]");if(r){if(state=e.copy(n.state),state.keyRedaction=state.keyRedaction||0,state.keyRedaction+=n.form.key.length+1,n.form.schema&&n.form.schema.items&&n.form.schema.items.type&&-1===n.form.schema.items.type.indexOf("object")&&-1===n.form.schema.items.type.indexOf("array")){t.stringify(n.form.key).replace(/"/g,"&quot;")+"[$index]";state.modelValue="modelArray[$index]"}else state.modelName="item";state.arrayCompatFlag=!0;var i=n.build(n.form.items,n.path+".items",state);r.appendChild(i)}}};this.builders=o;var a=[o.sfField,o.ngModel,o.ngModelOptions,o.condition];this.stdBuilders=a,this.$get=["$templateCache","schemaFormDecorators","sfPath",function(e,t,n){var i=function(e,t){if(e.key){var r=t[n.stringify(e.key)];if(r){for(;r.firstChild;)r.removeChild(r.firstChild);return r}}},s=function(e,t,n,o,a,l,u){l=l||{},u=u||Object.create(null),a=a||"schemaForm.form";var c=document.createDocumentFragment();return e.reduce(function(e,c,f){if(!c.type)return e;var d=t[c.type]||t["default"];if(d.replace){var h;l.arrayCompatFlag=!1;var p=document.createElement("div"),m=n(c,d)||n(c,t["default"]);for(p.innerHTML=m,h=document.createDocumentFragment();p.childNodes.length>0;)h.appendChild(p.childNodes[0]);var $={fieldFrag:h,form:c,lookup:u,state:l,path:a+"["+f+"]",build:function(e,r,i){return s(e,t,n,o,r,i,u)}},v=c.builder||d.builder;"function"==typeof v?v($):v.forEach(function(e){e($)}),(i(c,o)||e).appendChild(h)}else{var g=document.createElement(r(t.__name,"-"));l.arrayCompatFlag?g.setAttribute("form","copyWithIndex($index)"):g.setAttribute("form",a+"["+f+"]"),(i(c,o)||e).appendChild(g)}return e},c),c};return{build:function(t,n,r,i){return s(t,n,function(t,n){return"template"===t.type?t.template:e.get(n.template)},r,void 0,void 0,i)},builder:o,stdBuilders:a,internalBuild:s}}]}]),e.module("schemaForm").provider("schemaFormDecorators",["$compileProvider","sfPathProvider",function(t,n){var r="",i={},o=function(e,t){"sfDecorator"===e&&(e=r);var n=i[e];return n[t.type]?n[t.type].template:n["default"].template},a=function(r){t.directive(r,["$parse","$compile","$http","$templateCache","$interpolate","$q","sfErrorMessage","sfPath","sfSelect",function(t,i,a,s,l,u,c,f,d){return{restrict:"AE",replace:!1,transclude:!1,scope:!0,require:"?^sfSchema",link:function(t,h,p,m){t.$on("schemaFormPropagateNgModelController",function(e,n){e.stopPropagation(),e.preventDefault(),t.ngModel=n}),t.showTitle=function(){return t.form&&t.form.notitle!==!0&&t.form.title},t.listToCheckboxValues=function(t){var n={};return e.forEach(t,function(e){n[e]=!0}),n},t.checkboxValuesToList=function(t){var n=[];return e.forEach(t,function(e,t){e&&n.push(t)}),n},t.buttonClick=function(n,r){e.isFunction(r.onClick)?r.onClick(n,r):e.isString(r.onClick)&&(m?m.evalInParentScope(r.onClick,{$event:n,form:r}):t.$eval(r.onClick,{$event:n,form:r}))},t.evalExpr=function(e,n){return m?m.evalInParentScope(e,n):t.$eval(e,n)},t.evalInScope=function(e,n){return e?t.$eval(e,n):void 0},t.interp=function(e,t){return e&&l(e)(t)},t.hasSuccess=function(){return t.ngModel?t.ngModel.$valid&&(!t.ngModel.$pristine||!t.ngModel.$isEmpty(t.ngModel.$modelValue)):!1},t.hasError=function(){return t.ngModel?t.ngModel.$invalid&&!t.ngModel.$pristine:!1},t.errorMessage=function(e){return c.interpolate(e&&e.code+""||"default",t.ngModel&&t.ngModel.$modelValue||"",t.ngModel&&t.ngModel.$viewValue||"",t.form,t.options&&t.options.validationMessage)};var $=t.$watch(p.form,function(l){if(l){l.ngModelOptions=l.ngModelOptions||{},t.form=l;var c;if("template"===l.type&&l.template)c=u.when(l.template);else{var p="template"===l.type?l.templateUrl:o(r,l);c=a.get(p,{cache:s}).then(function(e){return e.data})}c.then(function(r){if(l.key){var o=l.key?n.stringify(l.key).replace(/"/g,"&quot;"):"";r=r.replace(/\$\$value\$\$/g,"model"+("["!==o[0]?".":"")+o)}if(h.html(r),l.condition){var a='evalExpr(form.condition,{ model: model, "arrayIndex": arrayIndex})';l.key&&(a='evalExpr(form.condition,{ model: model, "arrayIndex": arrayIndex, "modelValue": model'+f.stringify(l.key)+"})"),e.forEach(h.children(),function(e){var t=e.getAttribute("ng-if");e.setAttribute("ng-if",t?"("+t+") || ("+a+")":a)})}i(h.contents())(t)}),l.key&&(t.$on("schemaForm.error."+l.key.join("."),function(e,n,r,i){r!==!0&&r!==!1||(i=r,r=void 0),t.ngModel&&n&&(t.ngModel.$setDirty?t.ngModel.$setDirty():(t.ngModel.$dirty=!0,t.ngModel.$pristine=!1),r&&(l.validationMessage||(l.validationMessage={}),l.validationMessage[n]=r),t.ngModel.$setValidity(n,i===!0),i===!0&&(t.ngModel.$validate(),t.$broadcast("schemaFormValidate")))}),t.$on("$destroy",function(){if(!t.externalDestructionInProgress){var e=l.destroyStrategy||t.options&&t.options.destroyStrategy||"remove";if(l.key&&"retain"!==e){var n=t.model;if(l.key.length>1&&(n=d(l.key.slice(0,l.key.length-1),n)),void 0===n)return;var r=l.schema&&l.schema.type||"";"empty"===e&&-1!==r.indexOf("string")?n[l.key.slice(-1)]="":"empty"===e&&-1!==r.indexOf("object")?n[l.key.slice(-1)]={}:"empty"===e&&-1!==r.indexOf("array")?n[l.key.slice(-1)]=[]:"null"===e?n[l.key.slice(-1)]=null:delete n[l.key.slice(-1)]}}})),$()}})}}}])},s=function(n,r,i){i=e.isDefined(i)?i:!1,t.directive("sf"+e.uppercase(n[0])+n.substr(1),function(){return{restrict:"EAC",scope:!0,replace:!0,transclude:i,template:'<sf-decorator form="form"></sf-decorator>',link:function(t,r,i){var o={items:"c",titleMap:"c",schema:"c"},a={type:n},s=!0;e.forEach(i,function(n,r){if("$"!==r[0]&&0!==r.indexOf("ng")&&"sfField"!==r){var l=function(n){e.isDefined(n)&&n!==a[r]&&(a[r]=n,s&&a.type&&(a.key||e.isUndefined(i.key))&&(t.form=a,s=!1))};"model"===r?t.$watch(n,function(e){e&&t.model!==e&&(t.model=e)}):"c"===o[r]?t.$watchCollection(n,l):i.$observe(r,l)}})}}})};this.createDecorator=function(t,n){i[t]={__name:t},e.forEach(n,function(e,n){i[t][n]={template:e,replace:!1,builder:[]}}),i[r]||(r=t),a(t)},this.defineDecorator=function(t,n){i[t]={__name:t},e.forEach(n,function(n,r){n.builder=n.builder||[],n.replace=e.isDefined(n.replace)?n.replace:!0,i[t][r]=n}),i[r]||(r=t),a(t)},this.createDirective=s,this.createDirectives=function(t){e.forEach(t,function(e,t){s(t,e)})},this.decorator=function(e){return e=e||r,i[e]},this.addMapping=function(e,t,n,r,o){i[e]&&(i[e][t]={template:n,builder:r,replace:!!o})},this.defineAddOn=function(e,t,n,r){i[e]&&(i[e][t]={template:n,builder:r,replace:!0})},this.$get=function(){return{decorator:function(e){return i[e]||i[r]},defaultDecorator:r}},a("sfDecorator")}]),e.module("schemaForm").provider("sfErrorMessage",function(){var t={"default":"Field does not validate",0:"Invalid type, expected {{schema.type}}",1:"No enum match for: {{viewValue}}",10:'Data does not match any schemas from "anyOf"',11:'Data does not match any schemas from "oneOf"',12:'Data is valid against more than one schema from "oneOf"',13:'Data matches schema from "not"',100:"Value is not a multiple of {{schema.multipleOf}}",101:"{{viewValue}} is less than the allowed minimum of {{schema.minimum}}",102:"{{viewValue}} is equal to the exclusive minimum {{schema.minimum}}",103:"{{viewValue}} is greater than the allowed maximum of {{schema.maximum}}",104:"{{viewValue}} is equal to the exclusive maximum {{schema.maximum}}",105:"Value is not a valid number",200:"String is too short ({{viewValue.length}} chars), minimum {{schema.minLength}}",201:"String is too long ({{viewValue.length}} chars), maximum {{schema.maxLength}}",202:"String does not match pattern: {{schema.pattern}}",300:"Too few properties defined, minimum {{schema.minProperties}}",301:"Too many properties defined, maximum {{schema.maxProperties}}",302:"Required",303:"Additional properties not allowed",304:"Dependency failed - key must exist",400:"Array is too short ({{value.length}}), minimum {{schema.minItems}}",401:"Array is too long ({{value.length}}), maximum {{schema.maxItems}}",402:"Array items are not unique",403:"Additional items not allowed",500:"Format validation failed",501:'Keyword failed: "{{title}}"',600:"Circular $refs",1e3:"Unknown property (not in schema)"};t.number=t[105],t.required=t[302],t.min=t[101],t.max=t[103],t.maxlength=t[201],t.minlength=t[200],t.pattern=t[202],this.setDefaultMessages=function(e){t=e},this.getDefaultMessages=function(){return t},this.setDefaultMessage=function(e,n){t[e]=n},this.$get=["$interpolate",function(n){var r={};return r.defaultMessages=t,r.interpolate=function(r,i,o,a,s){s=s||{};var l=a.validationMessage||{};0===r.indexOf("tv4-")&&(r=r.substring(4));var u=l["default"]||s["default"]||"";[l,s,t].some(function(t){return e.isString(t)||e.isFunction(t)?(u=t,!0):t&&t[r]?(u=t[r],!0):void 0});var c={error:r,value:i,viewValue:o,form:a,schema:a.schema,title:a.title||a.schema&&a.schema.title};return e.isFunction(u)?u(c):n(u)(c)},r}]}),e.module("schemaForm").provider("schemaForm",["sfPathProvider",function(t){var n=function(e){if(Array.isArray(e)&&2==e.length){if("null"===e[0])return e[1];if("null"===e[1])return e[0]}return e},r=function(e){var t=[];return e.forEach(function(e){t.push({name:e,value:e})}),t},i=function(t,n){if(!e.isArray(t)){var r=[];return n?e.forEach(n,function(e,n){r.push({name:t[e],value:e})}):e.forEach(t,function(e,t){r.push({name:e,value:t})}),r}return t},o=function(t,r,i){var o=m[n(r.type)];if(o)for(var a,s=0;s<o.length;s++)if(a=o[s](t,r,i))return a.schema["x-schema-form"]&&e.isObject(a.schema["x-schema-form"])&&(a=e.extend(a,a.schema["x-schema-form"])),a},a=function(t,n,r){r=r||{};var o=r.global&&r.global.formDefaults?e.copy(r.global.formDefaults):{};return r.global&&r.global.supressPropertyTitles===!0?o.title=n.title:o.title=n.title||t,n.description&&(o.description=n.description),r.required!==!0&&n.required!==!0||(o.required=!0),n.maxLength&&(o.maxlength=n.maxLength),n.minLength&&(o.minlength=n.minLength),(n.readOnly||n.readonly)&&(o.readonly=!0),n.minimum&&(o.minimum=n.minimum+(n.exclusiveMinimum?1:0)),n.maximum&&(o.maximum=n.maximum-(n.exclusiveMaximum?1:0)),n.validationMessage&&(o.validationMessage=n.validationMessage),n.enumNames&&(o.titleMap=i(n.enumNames,n["enum"])),o.schema=n,o.ngModelOptions=o.ngModelOptions||{},o},s=function(e,r,i){if("string"===n(r.type)&&!r["enum"]){var o=a(e,r,i);return o.key=i.path,o.type="text",i.lookup[t.stringify(i.path)]=o,o}},l=function(e,r,i){if("number"===n(r.type)){var o=a(e,r,i);return o.key=i.path,o.type="number",i.lookup[t.stringify(i.path)]=o,o}},u=function(e,r,i){if("integer"===n(r.type)){var o=a(e,r,i);return o.key=i.path,o.type="number",i.lookup[t.stringify(i.path)]=o,o}},c=function(e,r,i){if("boolean"===n(r.type)){var o=a(e,r,i);return o.key=i.path,o.type="checkbox",i.lookup[t.stringify(i.path)]=o,o}},f=function(e,i,o){if("string"===n(i.type)&&i["enum"]){var s=a(e,i,o);return s.key=o.path,s.type="select",s.titleMap||(s.titleMap=r(i["enum"])),o.lookup[t.stringify(o.path)]=s,s}},d=function(e,i,o){if("array"===n(i.type)&&i.items&&i.items["enum"]){var s=a(e,i,o);return s.key=o.path,s.type="checkboxes",s.titleMap||(s.titleMap=r(i.items["enum"])),o.lookup[t.stringify(o.path)]=s,s}},h=function(r,i,s){if("object"===n(i.type)){var l=a(r,i,s);return l.type="fieldset",l.items=[],s.lookup[t.stringify(s.path)]=l,e.forEach(i.properties,function(e,n){var r=s.path.slice();if(r.push(n),s.ignore[t.stringify(r)]!==!0){var a=i.required&&-1!==i.required.indexOf(n),u=o(n,e,{path:r,required:a||!1,lookup:s.lookup,ignore:s.ignore,global:s.global});u&&l.items.push(u)}}),l}},p=function(e,r,i){if("array"===n(r.type)){var s=a(e,r,i);s.type="array",s.key=i.path,i.lookup[t.stringify(i.path)]=s;var l=r.required&&-1!==r.required.indexOf(i.path[i.path.length-1]),u=i.path.slice();return u.push(""),s.items=[o(e,r.items,{path:u,required:l||!1,lookup:i.lookup,ignore:i.ignore,global:i.global})],s}},m={string:[f,s],object:[h],number:[l],integer:[u],"boolean":[c],array:[d,p]},$=function(e){return e};this.defaults=m,this.stdFormObj=a,this.defaultFormDefinition=o,this.postProcess=function(e){$=e},this.appendRule=function(e,t){m[e]||(m[e]=[]),m[e].push(t)},this.prependRule=function(e,t){m[e]||(m[e]=[]),m[e].unshift(t)},this.createStandardForm=a,this.$get=function(){var r={};return r.merge=function(n,o,a,s,l,u){o=o||["*"],s=s||{},l=l||n.readonly||n.readOnly;var c=r.defaults(n,a,s),f=o.indexOf("*");-1!==f&&(o=o.slice(0,f).concat(c.form).concat(o.slice(f+1)));var d=c.lookup;return $(o.map(function(o){if("string"==typeof o&&(o={key:o}),o.key&&"string"==typeof o.key&&(o.key=t.parse(o.key)),o.titleMap&&(o.titleMap=i(o.titleMap)),o.itemForm){o.items=[];var c=t.stringify(o.key),f=d[c];e.forEach(f.items,function(t){var n=e.copy(o.itemForm);n.key=t.key,o.items.push(n)})}if(o.key){var h=t.stringify(o.key);if(d[h]){var p=d[h];e.forEach(p,function(e,t){void 0===o[t]&&(o[t]=p[t])})}}return l===!0&&(o.readonly=!0),o.items&&(o.items=r.merge(n,o.items,a,s,o.readonly,u)),o.tabs&&e.forEach(o.tabs,function(e){e.items=r.merge(n,e.items,a,s,o.readonly,u)}),"checkbox"===o.type&&e.isUndefined(o.schema["default"])&&(o.schema["default"]=!1),u&&"template"===o.type&&!o.template&&o.templateUrl&&u.push(o),o}))},r.defaults=function(t,r,i){var a=[],s={};if(r=r||{},i=i||{},"object"!==n(t.type))throw new Error('Not implemented. Only type "object" allowed at root level of schema.');return e.forEach(t.properties,function(e,n){if(r[n]!==!0){var l=t.required&&-1!==t.required.indexOf(n),u=o(n,e,{path:[n],lookup:s,ignore:r,required:l,global:i});u&&a.push(u)}}),{form:a,lookup:s}},r.traverseSchema=function(t,n,r,i){i=e.isDefined(i)?i:!0,r=r||[];var o=function(t,n,r){if(n(t,r),e.forEach(t.properties,function(e,t){var i=r.slice();i.push(t),o(e,n,i)}),!i&&t.items){var a=r.slice();a.push(""),o(t.items,n,a)}};o(t,n,r||[])},r.traverseForm=function(t,n){n(t),e.forEach(t.items,function(e){r.traverseForm(e,n)}),t.tabs&&e.forEach(t.tabs,function(t){e.forEach(t.items,function(e){r.traverseForm(e,n)})})},r}}]),e.module("schemaForm").factory("sfSelect",["sfPath",function(e){var t=/^\d+$/;return function(n,r,i){r||(r=this);var o="string"==typeof n?e.parse(n):n;if("undefined"!=typeof i&&1===o.length)return r[o[0]]=i,r;"undefined"!=typeof i&&"undefined"==typeof r[o[0]]&&(r[o[0]]=o.length>2&&t.test(o[1])?[]:{});for(var a=r[o[0]],s=1;s<o.length;s++){if(""===o[s])return;if("undefined"!=typeof i){if(s===o.length-1)return a[o[s]]=i,i;var l=a[o[s]];"undefined"!=typeof l&&null!==l||(l=t.test(o[s+1])?[]:{},a[o[s]]=l),a=l}else a&&(a=a[o[s]])}return a}}]),e.module("schemaForm").factory("sfValidator",[function(){var t={};return t.validate=function(t,r){if(!t)return{valid:!0};var i=t.schema;if(!i)return{valid:!0};""===r&&(r=void 0),"number"===t.type&&null===r&&(r=void 0);var o={type:"object",properties:{}},a=t.key[t.key.length-1];o.properties[a]=i,t.required&&(o.required=[a]);var s={};return e.isDefined(r)&&(s[a]=r),n.validateResult(s,o)},t}]),e.module("schemaForm").directive("sfArray",["sfSelect","schemaForm","sfValidator","sfPath",function(t,n,r,i){var o=function(e){return function(t){t.key&&(t.key[t.key.indexOf("")]=e)}};return{restrict:"A",scope:!0,require:"?ngModel",link:function(a,s,l,u){var c={};a.validateArray=e.noop,u&&a.$emit("schemaFormPropagateNgModelController",u);var f=a.$watch(l.sfArray,function(s){if(s){var l=t(s.key,a.model),d=i.normalize(s.key);if(a.$watch("model"+("["!==d[0]?".":"")+d,function(e){l=a.modelArray=e}),e.isUndefined(l)&&(l=[],t(s.key,a.model,l)),a.modelArray=l,s.items){var h=s.items[0];s.items.length>1&&(h={type:"section",items:s.items.map(function(t){return t.ngModelOptions=s.ngModelOptions,e.isUndefined(t.readonly)&&(t.readonly=s.readonly),t})})}if(a.copyWithIndex=function(t){if(!c[t]&&h){var r=e.copy(h);r.arrayIndex=t,n.traverseForm(r,o(t)),c[t]=r}return c[t]},a.appendToArray=function(){var r=l.length,i=a.copyWithIndex(r);if(n.traverseForm(i,function(n){if(n.key){var r;e.isDefined(n["default"])&&(r=n["default"]),e.isDefined(n.schema)&&e.isDefined(n.schema["default"])&&(r=n.schema["default"]),e.isDefined(r)&&t(n.key,a.model,r)}}),r===l.length){var o,u=t("schema.items.type",s);"object"===u?o={}:"array"===u&&(o=[]),l.push(o)}return a.validateArray(),l},a.deleteFromArray=function(e){return l.splice(e,1),a.validateArray(),u&&u.$setDirty&&u.$setDirty(),l},s.titleMap||s.startEmpty===!0||0!==l.length||a.appendToArray(),s.titleMap&&s.titleMap.length>0){a.titleMapValues=[];var p=function(e){a.titleMapValues=[],e=e||[],s.titleMap.forEach(function(t){a.titleMapValues.push(-1!==e.indexOf(t.value))})};p(a.modelArray),a.$watchCollection("modelArray",p),a.$watchCollection("titleMapValues",function(e,t){if(e&&e!==t){for(var n=a.modelArray;n.length>0;)n.pop();s.titleMap.forEach(function(t,r){e[r]&&n.push(t.value)}),a.validateArray()}})}if(u){var m;a.validateArray=function(){var e=r.validate(s,a.modelArray.length>0?a.modelArray:void 0);Object.keys(u.$error).filter(function(e){return 0===e.indexOf("tv4-")}).forEach(function(e){u.$setValidity(e,!0)}),e.valid!==!1||!e.error||""!==e.error.dataPath&&e.error.dataPath!=="/"+s.key[s.key.length-1]||(u.$setViewValue(a.modelArray),m=e.error,u.$setValidity("tv4-"+e.error.code,!1))},a.$on("schemaFormValidate",a.validateArray),a.hasSuccess=function(){return a.options&&a.options.pristine&&a.options.pristine.success===!1?u.$valid&&!u.$pristine&&!u.$isEmpty(u.$modelValue):u.$valid&&(!u.$pristine||!u.$isEmpty(u.$modelValue))},a.hasError=function(){return a.options&&a.options.pristine&&a.options.pristine.errors===!1?u.$invalid&&!u.$pristine:u.$invalid},a.schemaError=function(){return m}}f()}})}}}]),e.module("schemaForm").directive("sfChanged",function(){return{require:"ngModel",restrict:"AC",scope:!1,link:function(t,n,r,i){var o=t.$eval(r.sfChanged);o&&o.onChange&&i.$viewChangeListeners.push(function(){e.isFunction(o.onChange)?o.onChange(i.$modelValue,o):t.evalExpr(o.onChange,{modelValue:i.$modelValue,form:o})})}}}),e.module("schemaForm").directive("sfField",["$parse","$compile","$http","$templateCache","$interpolate","$q","sfErrorMessage","sfPath","sfSelect",function(t,n,r,i,o,a,s,l,u){return{restrict:"AE",replace:!1,transclude:!1,scope:!0,require:"^sfSchema",link:{pre:function(e,t,n,r){e.$on("schemaFormPropagateNgModelController",function(t,n){t.stopPropagation(),t.preventDefault(),e.ngModel=n}),e.form=r.lookup["f"+n.sfField]},post:function(t,n,r,i){t.showTitle=function(){return t.form&&t.form.notitle!==!0&&t.form.title},t.listToCheckboxValues=function(t){var n={};return e.forEach(t,function(e){n[e]=!0}),n},t.checkboxValuesToList=function(t){var n=[];return e.forEach(t,function(e,t){e&&n.push(t)}),n},t.buttonClick=function(n,r){e.isFunction(r.onClick)?r.onClick(n,r):e.isString(r.onClick)&&(i?i.evalInParentScope(r.onClick,{$event:n,form:r}):t.$eval(r.onClick,{$event:n,form:r}))},t.evalExpr=function(e,n){return i?i.evalInParentScope(e,n):t.$eval(e,n)},t.evalInScope=function(e,n){return e?t.$eval(e,n):void 0},t.interp=function(e,t){return e&&o(e)(t)},t.hasSuccess=function(){return t.ngModel?t.options&&t.options.pristine&&t.options.pristine.success===!1?t.ngModel.$valid&&!t.ngModel.$pristine&&!t.ngModel.$isEmpty(t.ngModel.$modelValue):t.ngModel.$valid&&(!t.ngModel.$pristine||!t.ngModel.$isEmpty(t.ngModel.$modelValue)):!1},t.hasError=function(){return t.ngModel?t.options&&t.options.pristine&&t.options.pristine.errors===!1?t.ngModel.$invalid&&!t.ngModel.$pristine:t.ngModel.$invalid:!1},t.errorMessage=function(e){return s.interpolate(e&&e.code+""||"default",t.ngModel&&t.ngModel.$modelValue||"",t.ngModel&&t.ngModel.$viewValue||"",t.form,t.options&&t.options.validationMessage)};var a=t.form;a.key&&(t.$on("schemaForm.error."+a.key.join("."),function(e,n,r,i){r!==!0&&r!==!1||(i=r,r=void 0),t.ngModel&&n&&(t.ngModel.$setDirty?t.ngModel.$setDirty():(t.ngModel.$dirty=!0,t.ngModel.$pristine=!1),r&&(a.validationMessage||(a.validationMessage={}),a.validationMessage[n]=r),t.ngModel.$setValidity(n,i===!0),i===!0&&(t.ngModel.$validate(),t.$broadcast("schemaFormValidate")))}),t.$on("$destroy",function(){if(!t.externalDestructionInProgress){var e=a.destroyStrategy||t.options&&t.options.destroyStrategy||"remove";if(a.key&&"retain"!==e){var n=t.model;if(a.key.length>1&&(n=u(a.key.slice(0,a.key.length-1),n)),void 0===n)return;var r=a.schema&&a.schema.type||"";"empty"===e&&-1!==r.indexOf("string")?n[a.key.slice(-1)]="":"empty"===e&&-1!==r.indexOf("object")?n[a.key.slice(-1)]={}:"empty"===e&&-1!==r.indexOf("array")?n[a.key.slice(-1)]=[]:"null"===e?n[a.key.slice(-1)]=null:delete n[a.key.slice(-1)]}}}))}}}}]),e.module("schemaForm").directive("sfMessage",["$injector","sfErrorMessage",function(t,n){var r=t.has("$sanitize")?t.get("$sanitize"):function(e){return e};return{scope:!1,restrict:"EA",link:function(t,i,o){var a="";o.sfMessage&&t.$watch(o.sfMessage,function(e){e&&(a=r(e),u(!!t.ngModel))});var s,l=function(e){e!==s&&(i.html(e),s=e)},u=function(r){if(r)if(t.hasError()){var i=[];e.forEach(t.ngModel&&t.ngModel.$error,function(e,t){e&&i.push(t)}),i=i.filter(function(e){return"schemaForm"!==e});var o=i[0];l(o?n.interpolate(o,t.ngModel.$modelValue,t.ngModel.$viewValue,t.form,t.options&&t.options.validationMessage):a)}else l(a);else l(a)};u();var c=t.$watch("ngModel",function(e){e&&(e.$parsers.push(function(e){return u(!0),e}),e.$formatters.push(function(e){return u(!0),e}),c())});t.$watchCollection("ngModel.$error",function(){u(!!t.ngModel)})}}}]),e.module("schemaForm").directive("sfNewArray",["sfSelect","sfPath","schemaForm",function(t,n,r){return{scope:!1,link:function(i,o,a){i.min=0,i.modelArray=i.$eval(a.sfNewArray);var s=function(){i.modelArray=i.$eval(a.sfNewArray),i.ngModel&&i.ngModel.$pristine&&i.firstDigest&&(!i.options||i.options.validateOnRender!==!0)||i.validateField&&i.validateField()},l=function(){i.form&&i.form.onChange&&(e.isFunction(i.form.onChange)?i.form.onChange(i.modelArray,i.form):i.evalExpr(i.form.onChange,{modelValue:i.modelArray,form:i.form}))},u=function(){var e=i.modelArray;if(!e){var r=n.parse(a.sfNewArray);e=[],t(r,i,e),i.modelArray=e}return e},c=i.$watch("form",function(e){if(e){if(e.titleMap||e.startEmpty===!0||i.modelArray&&0!==i.modelArray.length||i.appendToArray(),i.form&&i.form.schema&&i.form.schema.uniqueItems===!0?(i.$watch(a.sfNewArray,s,!0),i.$watch([a.sfNewArray,a.sfNewArray+".length"],l)):i.$watchGroup?i.$watchGroup([a.sfNewArray,a.sfNewArray+".length"],function(){s(),l()}):(i.$watch(a.sfNewArray,function(){s(),l()}),i.$watch(a.sfNewArray+".length",function(){s(),l()})),e.titleMap&&e.titleMap.length>0){i.titleMapValues=[];var t=function(t){i.titleMapValues=[],t=t||[],e.titleMap.forEach(function(e){i.titleMapValues.push(-1!==t.indexOf(e.value))})};t(i.modelArray),i.$watchCollection("modelArray",t),i.$watchCollection("titleMapValues",function(t,n){if(t&&t!==n){for(var r=u();r.length>0;)r.pop();e.titleMap.forEach(function(e,n){t[n]&&r.push(e.value)}),i.validateField&&i.validateField()}})}c()}});i.appendToArray=function(){var n,o=u();if(i.form&&i.form.schema&&i.form.schema.items){var a=i.form.schema.items;a.type&&-1!==a.type.indexOf("object")?(n={},i.options&&i.options.setSchemaDefaults===!1||(n=e.isDefined(a["default"])?a["default"]:n,n&&r.traverseSchema(a,function(r,i){e.isDefined(r["default"])&&t(i,n,r["default"])}))):a.type&&-1!==a.type.indexOf("array")?(n=[],i.options&&i.options.setSchemaDefaults===!1||(n=a["default"]||n)):i.options&&i.options.setSchemaDefaults===!1||(n=a["default"]||n)}return o.push(n),o},i.deleteFromArray=function(e){var t=i.modelArray;return t&&t.splice(e,1),t};var f=function(e){return function(t){t.key&&(t.key[t.key.indexOf("")]=e)}},d={};i.copyWithIndex=function(t){var n=i.form;if(!d[t]){var o=n.items[0];if(n.items.length>1&&(o={type:"section",items:n.items.map(function(t){return t.ngModelOptions=n.ngModelOptions,
e.isUndefined(t.readonly)&&(t.readonly=n.readonly),t})}),o){var a=e.copy(o);a.arrayIndex=t,r.traverseForm(a,f(t)),d[t]=a}}return d[t]}}}}]),e.module("schemaForm").directive("sfSchema",["$compile","$http","$templateCache","$q","schemaForm","schemaFormDecorators","sfSelect","sfPath","sfBuilder",function(t,n,r,i,o,a,s,l,u){return{scope:{schema:"=sfSchema",initialForm:"=sfForm",model:"=sfModel",options:"=sfOptions"},controller:["$scope",function(e){this.evalInParentScope=function(t,n){return e.$parent.$eval(t,n)};var t=this;e.lookup=function(e){return e&&(t.lookup=e),t.lookup}}],replace:!1,restrict:"A",transclude:!0,require:"?form",link:function(l,c,f,d,h){l.formCtrl=d;var p={};h(l,function(e){if(e.addClass("schema-form-ignore"),c.prepend(e),c[0].querySelectorAll){var t=c[0].querySelectorAll("[ng-model]");if(t)for(var n=0;n<t.length;n++){var r=t[n].getAttribute("ng-model");p[r.substring(r.indexOf(".")+1)]=!0}}});var m,$={},v=function(e,t){var a=[],s=o.merge(e,t,p,l.options,void 0,a);a.length>0?i.all(a.map(function(e){return n.get(e.templateUrl,{cache:r}).then(function(t){e.template=t.data})})).then(function(){g(e,t,s)}):g(e,t,s)},g=function(n,r,i){m&&(l.externalDestructionInProgress=!0,m.$destroy(),l.externalDestructionInProgress=!1),m=l.$new(),m.schemaForm={form:i,schema:n},c.children(":not(.schema-form-ignore)").remove();for(var d={},h=c[0].querySelectorAll("*[sf-insert-field]"),p=0;p<h.length;p++)d[h[p].getAttribute("sf-insert-field")]=h[p];var $=a.decorator(f.sfUseDecorator),v=Object.create(null);l.lookup(v),c[0].appendChild(u.build(i,$,d,v)),m.firstDigest=!0,setTimeout(function(){m.firstDigest=!1},0),t(c.children())(m),l.options&&l.options.setSchemaDefaults===!1||o.traverseSchema(n,function(t,n){if(e.isDefined(t["default"])){var r=s(n,l.model);e.isUndefined(r)&&s(n,l.model,t["default"])}}),l.$emit("sf-render-finished",c)},y=["*"];l.$watch(function(){var e=l.schema,t=l.initialForm||y;t&&e&&e.type&&($.form!==t||$.schema!==e)&&Object.keys(e.properties).length>0&&($.schema=e,$.form=t,v(e,t))}),l.$on("schemaFormRedraw",function(){var t=l.schema,n=l.initialForm?e.copy(l.initialForm):["*"];t&&v(t,n)}),l.$on("$destroy",function(){l.externalDestructionInProgress=!0}),l.evalExpr=function(e,t){return l.$parent.$eval(e,t)}}}}]),e.module("schemaForm").directive("schemaValidate",["sfValidator","$parse","sfSelect",function(t,n,r){return{restrict:"A",scope:!1,priority:500,require:"ngModel",link:function(n,i,o,a){n.$emit("schemaFormPropagateNgModelController",a);var s=null,l=n.$eval(o.schemaValidate);l.copyValueTo&&a.$viewChangeListeners.push(function(){var t=l.copyValueTo;e.forEach(t,function(e){r(e,n.model,a.$modelValue)})});var u=function(e){if(!l)return e;if(n.options&&n.options.tv4Validation===!1)return e;var r=t.validate(l,e);Object.keys(a.$error).filter(function(e){return 0===e.indexOf("tv4-")}).forEach(function(e){a.$setValidity(e,!0)});{if(r.valid)return e;if(a.$setValidity("tv4-"+r.error.code,!1),s=r.error,a.$validators)return e}};"function"==typeof l.ngModel&&l.ngModel(a),["$parsers","$viewChangeListeners","$formatters"].forEach(function(e){l[e]&&a[e]&&l[e].forEach(function(t){a[e].push(t)})}),["$validators","$asyncValidators"].forEach(function(t){l[t]&&a[t]&&e.forEach(l[t],function(e,n){a[t][n]=e})}),a.$parsers.push(u),a.$validators&&(a.$validators.schemaForm=function(){return!Object.keys(a.$error).some(function(e){return"schemaForm"!==e})});var c=l.schema;n.validateField=function(e){void 0!=e&&a.$$parentForm.$name!==e||(c&&-1!==c.type.indexOf("array")&&u(a.$modelValue),a.$setDirty?(a.$setDirty(),a.$setViewValue(a.$viewValue),a.$commitViewValue(),l.required&&a.$isEmpty(a.$modelValue)&&a.$setValidity("tv4-302",!1)):a.$setViewValue(a.$viewValue))},a.$formatters.push(function(e){return!a.$pristine||!n.firstDigest||n.options&&n.options.validateOnRender===!0?(u(a.$modelValue),e):e}),n.$on("schemaFormValidate",function(e,t){n.validateField(t)}),n.schemaError=function(){return s}}}}]),o}),function(e,t){"function"==typeof define&&define.amd?define(["schemaForm"],t):"object"==typeof exports?module.exports=t(require("schemaForm")):e.bootstrapDecorator=t(e.schemaForm)}(this,function(e){return angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/actions-trcl.html",'<div class="btn-group schema-form-actions {{form.htmlClass}}" ng-transclude=""></div>'),e.put("directives/decorators/bootstrap/actions.html",'<div class="btn-group schema-form-actions {{form.htmlClass}}"><input ng-repeat-start="item in form.items" type="submit" class="btn {{ item.style || \'btn-default\' }} {{form.fieldHtmlClass}}" value="{{item.title}}" ng-if="item.type === \'submit\'"> <button ng-repeat-end="" class="btn {{ item.style || \'btn-default\' }} {{form.fieldHtmlClass}}" type="button" ng-disabled="form.readonly" ng-if="item.type !== \'submit\'" ng-click="buttonClick($event,item)"><span ng-if="item.icon" class="{{item.icon}}"></span>{{item.title}}</button></div>'),e.put("directives/decorators/bootstrap/array.html",'<div sf-array="form" class="schema-form-array {{form.htmlClass}}" ng-model="$$value$$" ng-model-options="form.ngModelOptions"><label class="control-label" ng-show="showTitle()">{{ form.title }}</label><ol class="list-group" ng-model="modelArray" ui-sortable=""><li class="list-group-item {{form.fieldHtmlClass}}" ng-repeat="item in modelArray track by $index"><button ng-hide="form.readonly || form.remove === null" ng-click="deleteFromArray($index)" style="position: relative; z-index: 20;" type="button" class="close pull-right"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button><sf-decorator ng-init="arrayIndex = $index" form="copyWithIndex($index)"></sf-decorator></li></ol><div class="clearfix" style="padding: 15px;"><button ng-hide="form.readonly || form.add === null" ng-click="appendToArray()" type="button" class="btn {{ form.style.add || \'btn-default\' }} pull-right"><i class="glyphicon glyphicon-plus"></i> {{ form.add || \'Add\'}}</button></div><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div>'),e.put("directives/decorators/bootstrap/checkbox.html",'<div class="checkbox schema-form-checkbox {{form.htmlClass}}" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess()}"><label class="{{form.labelHtmlClass}}"><input type="checkbox" sf-changed="form" ng-disabled="form.readonly" ng-model="$$value$$" ng-model-options="form.ngModelOptions" schema-validate="form" class="{{form.fieldHtmlClass}}" name="{{form.key.slice(-1)[0]}}"> <span ng-bind-html="form.title"></span></label><div class="help-block" sf-message="form.description"></div></div>'),e.put("directives/decorators/bootstrap/checkboxes.html",'<div sf-array="form" ng-model="$$value$$" class="form-group schema-form-checkboxes {{form.htmlClass}}" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess()}"><label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="checkbox" ng-repeat="val in titleMapValues track by $index"><label><input type="checkbox" ng-disabled="form.readonly" sf-changed="form" class="{{form.fieldHtmlClass}}" ng-model="titleMapValues[$index]" name="{{form.key.slice(-1)[0]}}"> <span ng-bind-html="form.titleMap[$index].name"></span></label></div><div class="help-block" sf-message="form.description"></div></div>'),e.put("directives/decorators/bootstrap/default.html",'<div class="form-group schema-form-{{form.type}} {{form.htmlClass}}" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false }"><label class="control-label {{form.labelHtmlClass}}" ng-class="{\'sr-only\': !showTitle()}" for="{{form.key.slice(-1)[0]}}">{{form.title}}</label> <input ng-if="!form.fieldAddonLeft && !form.fieldAddonRight" ng-show="form.key" type="{{form.type}}" step="any" sf-changed="form" placeholder="{{form.placeholder}}" class="form-control {{form.fieldHtmlClass}}" id="{{form.key.slice(-1)[0]}}" ng-model-options="form.ngModelOptions" ng-model="$$value$$" ng-disabled="form.readonly" schema-validate="form" name="{{form.key.slice(-1)[0]}}" aria-describedby="{{form.key.slice(-1)[0] + \'Status\'}}"><div ng-if="form.fieldAddonLeft || form.fieldAddonRight" ng-class="{\'input-group\': (form.fieldAddonLeft || form.fieldAddonRight)}"><span ng-if="form.fieldAddonLeft" class="input-group-addon" ng-bind-html="form.fieldAddonLeft"></span> <input ng-show="form.key" type="{{form.type}}" step="any" sf-changed="form" placeholder="{{form.placeholder}}" class="form-control {{form.fieldHtmlClass}}" id="{{form.key.slice(-1)[0]}}" ng-model-options="form.ngModelOptions" ng-model="$$value$$" ng-disabled="form.readonly" schema-validate="form" name="{{form.key.slice(-1)[0]}}" aria-describedby="{{form.key.slice(-1)[0] + \'Status\'}}"> <span ng-if="form.fieldAddonRight" class="input-group-addon" ng-bind-html="form.fieldAddonRight"></span></div><span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }" aria-hidden="true"></span> <span ng-if="hasError() || hasSuccess()" id="{{form.key.slice(-1)[0] + \'Status\'}}" class="sr-only">{{ hasSuccess() ? \'(success)\' : \'(error)\' }}</span><div class="help-block" sf-message="form.description"></div></div>'),e.put("directives/decorators/bootstrap/fieldset-trcl.html",'<fieldset ng-disabled="form.readonly" class="schema-form-fieldset {{form.htmlClass}}"><legend ng-class="{\'sr-only\': !showTitle() }">{{ form.title }}</legend><div class="help-block" ng-show="form.description" ng-bind-html="form.description"></div><div ng-transclude=""></div></fieldset>'),e.put("directives/decorators/bootstrap/fieldset.html",'<fieldset ng-disabled="form.readonly" class="schema-form-fieldset {{form.htmlClass}}"><legend ng-class="{\'sr-only\': !showTitle() }">{{ form.title }}</legend><div class="help-block" ng-show="form.description" ng-bind-html="form.description"></div><sf-decorator ng-repeat="item in form.items" form="item"></sf-decorator></fieldset>'),e.put("directives/decorators/bootstrap/help.html",'<div class="helpvalue schema-form-helpvalue {{form.htmlClass}}" ng-bind-html="form.helpvalue"></div>'),e.put("directives/decorators/bootstrap/radio-buttons.html",'<div class="form-group schema-form-radiobuttons {{form.htmlClass}}" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess()}"><div><label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label></div><div class="btn-group"><label class="btn {{ (item.value === $$value$$) ? form.style.selected || \'btn-default\' : form.style.unselected || \'btn-default\'; }}" ng-class="{ active: item.value === $$value$$ }" ng-repeat="item in form.titleMap"><input type="radio" class="{{form.fieldHtmlClass}}" sf-changed="form" style="display: none;" ng-disabled="form.readonly" ng-model="$$value$$" ng-model-options="form.ngModelOptions" schema-validate="form" ng-value="item.value" name="{{form.key.join(\'.\')}}"> <span ng-bind-html="item.name"></span></label></div><div class="help-block" sf-message="form.description"></div></div>'),e.put("directives/decorators/bootstrap/radios-inline.html",'<div class="form-group schema-form-radios-inline {{form.htmlClass}}" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess()}"><label ng-model="$$value$$" ng-model-options="form.ngModelOptions" schema-validate="form" class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div><label class="radio-inline" ng-repeat="item in form.titleMap"><input type="radio" class="{{form.fieldHtmlClass}}" sf-changed="form" ng-disabled="form.readonly" ng-model="$$value$$" ng-value="item.value" name="{{form.key.join(\'.\')}}"> <span ng-bind-html="item.name"></span></label></div><div class="help-block" sf-message="form.description"></div></div>'),e.put("directives/decorators/bootstrap/radios.html",'<div class="form-group schema-form-radios {{form.htmlClass}}" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess()}"><label ng-model="$$value$$" ng-model-options="form.ngModelOptions" schema-validate="form" class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="radio" ng-repeat="item in form.titleMap"><label><input type="radio" class="{{form.fieldHtmlClass}}" sf-changed="form" ng-disabled="form.readonly" ng-model="$$value$$" ng-value="item.value" name="{{form.key.join(\'.\')}}"> <span ng-bind-html="item.name"></span></label></div><div class="help-block" sf-message="form.description"></div></div>'),e.put("directives/decorators/bootstrap/section.html",'<div class="schema-form-section {{form.htmlClass}}"><sf-decorator ng-repeat="item in form.items" form="item"></sf-decorator></div>'),e.put("directives/decorators/bootstrap/select.html",'<div class="form-group {{form.htmlClass}} schema-form-select" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false}"><label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><select ng-model="$$value$$" ng-model-options="form.ngModelOptions" ng-disabled="form.readonly" sf-changed="form" class="form-control {{form.fieldHtmlClass}}" schema-validate="form" ng-options="item.value as item.name group by item.group for item in form.titleMap" name="{{form.key.slice(-1)[0]}}"></select><div class="help-block" sf-message="form.description"></div></div>'),e.put("directives/decorators/bootstrap/submit.html",'<div class="form-group schema-form-submit {{form.htmlClass}}"><input type="submit" class="btn {{ form.style || \'btn-primary\' }} {{form.fieldHtmlClass}}" value="{{form.title}}" ng-disabled="form.readonly" ng-if="form.type === \'submit\'"> <button class="btn {{ form.style || \'btn-default\' }}" type="button" ng-click="buttonClick($event,form)" ng-disabled="form.readonly" ng-if="form.type !== \'submit\'"><span ng-if="form.icon" class="{{form.icon}}"></span> {{form.title}}</button></div>'),e.put("directives/decorators/bootstrap/tabarray.html",'<div sf-array="form" ng-init="selected = { tab: 0 }" class="clearfix schema-form-tabarray schema-form-tabarray-{{form.tabType || \'left\'}} {{form.htmlClass}}"><div ng-if="!form.tabType || form.tabType !== \'right\'" ng-class="{\'col-xs-3\': !form.tabType || form.tabType === \'left\'}"><ul class="nav nav-tabs" ng-class="{ \'tabs-left\': !form.tabType || form.tabType === \'left\'}"><li ng-repeat="item in modelArray track by $index" ng-click="$event.preventDefault() || (selected.tab = $index)" ng-class="{active: selected.tab === $index}"><a href="#">{{interp(form.title,{\'$index\':$index, value: item}) || $index}}</a></li><li ng-hide="form.readonly" ng-click="$event.preventDefault() || (selected.tab = appendToArray().length - 1)"><a href="#"><i class="glyphicon glyphicon-plus"></i> {{ form.add || \'Add\'}}</a></li></ul></div><div ng-class="{\'col-xs-9\': !form.tabType || form.tabType === \'left\' || form.tabType === \'right\'}"><div class="tab-content {{form.fieldHtmlClass}}"><div class="tab-pane clearfix" ng-repeat="item in modelArray track by $index" ng-show="selected.tab === $index" ng-class="{active: selected.tab === $index}"><sf-decorator ng-init="arrayIndex = $index" form="copyWithIndex($index)"></sf-decorator><button ng-hide="form.readonly" ng-click="selected.tab = deleteFromArray($index).length - 1" type="button" class="btn {{ form.style.remove || \'btn-default\' }} pull-right"><i class="glyphicon glyphicon-trash"></i> {{ form.remove || \'Remove\'}}</button></div></div></div><div ng-if="form.tabType === \'right\'" class="col-xs-3"><ul class="nav nav-tabs tabs-right"><li ng-repeat="item in modelArray track by $index" ng-click="$event.preventDefault() || (selected.tab = $index)" ng-class="{active: selected.tab === $index}"><a href="#">{{interp(form.title,{\'$index\':$index, value: item}) || $index}}</a></li><li ng-hide="form.readonly" ng-click="$event.preventDefault() || appendToArray()"><a href="#"><i class="glyphicon glyphicon-plus"></i> {{ form.add || \'Add\'}}</a></li></ul></div></div>'),e.put("directives/decorators/bootstrap/tabs.html",'<div ng-init="selected = { tab: 0 }" class="schema-form-tabs {{form.htmlClass}}"><ul class="nav nav-tabs"><li ng-repeat="tab in form.tabs" ng-disabled="form.readonly" ng-click="$event.preventDefault() || (selected.tab = $index)" ng-class="{active: selected.tab === $index}"><a href="#">{{ tab.title }}</a></li></ul><div class="tab-content {{form.fieldHtmlClass}}"><div class="tab-pane" ng-disabled="form.readonly" ng-repeat="tab in form.tabs" ng-show="selected.tab === $index" ng-class="{active: selected.tab === $index}"><bootstrap-decorator ng-repeat="item in tab.items" form="item"></bootstrap-decorator></div></div></div>'),e.put("directives/decorators/bootstrap/textarea.html",'<div class="form-group has-feedback {{form.htmlClass}} schema-form-textarea" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess()}"><label class="{{form.labelHtmlClass}}" ng-class="{\'sr-only\': !showTitle()}" for="{{form.key.slice(-1)[0]}}">{{form.title}}</label> <textarea ng-if="!form.fieldAddonLeft && !form.fieldAddonRight" class="form-control {{form.fieldHtmlClass}}" id="{{form.key.slice(-1)[0]}}" sf-changed="form" placeholder="{{form.placeholder}}" ng-disabled="form.readonly" ng-model="$$value$$" ng-model-options="form.ngModelOptions" schema-validate="form" name="{{form.key.slice(-1)[0]}}"></textarea><div ng-if="form.fieldAddonLeft || form.fieldAddonRight" ng-class="{\'input-group\': (form.fieldAddonLeft || form.fieldAddonRight)}"><span ng-if="form.fieldAddonLeft" class="input-group-addon" ng-bind-html="form.fieldAddonLeft"></span> <textarea class="form-control {{form.fieldHtmlClass}}" id="{{form.key.slice(-1)[0]}}" sf-changed="form" placeholder="{{form.placeholder}}" ng-disabled="form.readonly" ng-model="$$value$$" ng-model-options="form.ngModelOptions" schema-validate="form" name="{{form.key.slice(-1)[0]}}"></textarea> <span ng-if="form.fieldAddonRight" class="input-group-addon" ng-bind-html="form.fieldAddonRight"></span></div><span class="help-block" sf-message="form.description"></span></div>')}]),angular.module("schemaForm").config(["schemaFormDecoratorsProvider",function(e){var t="directives/decorators/bootstrap/";e.defineDecorator("bootstrapDecorator",{textarea:{template:t+"textarea.html",replace:!1},fieldset:{template:t+"fieldset.html",replace:!1},array:{template:t+"array.html",replace:!1},tabarray:{template:t+"tabarray.html",replace:!1},tabs:{template:t+"tabs.html",replace:!1},section:{template:t+"section.html",replace:!1},conditional:{template:t+"section.html",replace:!1},actions:{template:t+"actions.html",replace:!1},select:{template:t+"select.html",replace:!1},checkbox:{template:t+"checkbox.html",replace:!1},checkboxes:{template:t+"checkboxes.html",replace:!1},number:{template:t+"default.html",replace:!1},password:{template:t+"default.html",replace:!1},submit:{template:t+"submit.html",replace:!1},button:{template:t+"submit.html",replace:!1},radios:{template:t+"radios.html",replace:!1},"radios-inline":{template:t+"radios-inline.html",replace:!1},radiobuttons:{template:t+"radio-buttons.html",replace:!1},help:{template:t+"help.html",replace:!1},"default":{template:t+"default.html",replace:!1}},[]),e.createDirectives({textarea:t+"textarea.html",select:t+"select.html",checkbox:t+"checkbox.html",checkboxes:t+"checkboxes.html",number:t+"default.html",submit:t+"submit.html",button:t+"submit.html",text:t+"default.html",date:t+"default.html",password:t+"default.html",datepicker:t+"datepicker.html",input:t+"default.html",radios:t+"radios.html","radios-inline":t+"radios-inline.html",radiobuttons:t+"radio-buttons.html"})}]).directive("sfFieldset",function(){return{transclude:!0,scope:!0,templateUrl:"directives/decorators/bootstrap/fieldset-trcl.html",link:function(e,t,n){e.title=e.$eval(n.title)}}}),e});
//# sourceMappingURL=data:application/json;base64,
